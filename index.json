{
  "api/Global.AudioLayerControls.html": {
    "href": "api/Global.AudioLayerControls.html",
    "title": "Class AudioLayerControls | Omiya Games - Audio documentation",
    "keywords": "Class AudioLayerControls Inheritance Object AudioLayerControls Namespace : Global Assembly : cs.temp.dll.dll Syntax public class AudioLayerControls : MonoBehaviour Methods Setup(AudioLayer) Declaration public void Setup(AudioLayer layer) Parameters Type Name Description AudioLayer layer"
  },
  "api/Global.EffectsControls.html": {
    "href": "api/Global.EffectsControls.html",
    "title": "Class EffectsControls | Omiya Games - Audio documentation",
    "keywords": "Class EffectsControls Inheritance Object EffectsControls Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EffectsControls : MonoBehaviour Methods Setup() Declaration public void Setup()"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | Omiya Games - Audio documentation",
    "keywords": "Namespace Global Classes AudioLayerControls EffectsControls PlayAudioControl PlaySoundEffect Toolbar VolumeMenu"
  },
  "api/Global.PlayAudioControl.html": {
    "href": "api/Global.PlayAudioControl.html",
    "title": "Class PlayAudioControl | Omiya Games - Audio documentation",
    "keywords": "Class PlayAudioControl Inheritance Object PlayAudioControl Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayAudioControl : MonoBehaviour Methods Setup(AudioLayer.SubLayer) Declaration public void Setup(AudioLayer.SubLayer layer) Parameters Type Name Description AudioLayer.SubLayer layer"
  },
  "api/Global.PlaySoundEffect.html": {
    "href": "api/Global.PlaySoundEffect.html",
    "title": "Class PlaySoundEffect | Omiya Games - Audio documentation",
    "keywords": "Class PlaySoundEffect Inheritance Object PlaySoundEffect Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlaySoundEffect : MonoBehaviour"
  },
  "api/Global.Toolbar.html": {
    "href": "api/Global.Toolbar.html",
    "title": "Class Toolbar | Omiya Games - Audio documentation",
    "keywords": "Class Toolbar Inheritance Object Toolbar Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Toolbar : MonoBehaviour"
  },
  "api/Global.VolumeMenu.html": {
    "href": "api/Global.VolumeMenu.html",
    "title": "Class VolumeMenu | Omiya Games - Audio documentation",
    "keywords": "Class VolumeMenu Inheritance Object VolumeMenu Namespace : Global Assembly : cs.temp.dll.dll Syntax public class VolumeMenu : MonoBehaviour"
  },
  "api/OmiyaGames.Audio.AudioLayer.Background.html": {
    "href": "api/OmiyaGames.Audio.AudioLayer.Background.html",
    "title": "Class AudioLayer.Background | Omiya Games - Audio documentation",
    "keywords": "Class AudioLayer.Background Audio category applicable to ones predominately used in the background, i.e. music and ambience. Inheritance Object AudioLayer AudioLayer.SubLayer AudioLayer.Background Inherited Members AudioLayer.SubLayer.DefaultGroup AudioLayer.VolumeParam AudioLayer.PitchParam AudioLayer.VolumeSaver AudioLayer.IsMutedSaver AudioLayer.VolumeDb AudioLayer.VolumePercent AudioLayer.Pitch AudioLayer.IsMuted AudioLayer.Dispose() Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax [Serializable] public class Background : AudioLayer.SubLayer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0-pre.1 Date: 2/27/2022 Author: Taro Omiya Initial draft."
  },
  "api/OmiyaGames.Audio.AudioLayer.html": {
    "href": "api/OmiyaGames.Audio.AudioLayer.html",
    "title": "Class AudioLayer | Omiya Games - Audio documentation",
    "keywords": "Class AudioLayer Base info on each audio category. Inheritance Object AudioLayer AudioLayer.SubLayer Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class AudioLayer : IDisposable Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0-pre.1 Date: 2/27/2022 Author: Taro Omiya Initial draft. Properties IsMuted TODO Declaration public bool IsMuted { get; set; } Property Value Type Description Boolean IsMutedSaver TODO Declaration public SaveBool IsMutedSaver { get; } Property Value Type Description SaveBool Pitch TODO Declaration public float Pitch { get; set; } Property Value Type Description Single PitchParam TODO Declaration public string PitchParam { get; } Property Value Type Description String VolumeDb TODO Declaration public float VolumeDb { get; } Property Value Type Description Single VolumeParam TODO Declaration public string VolumeParam { get; } Property Value Type Description String VolumePercent TODO Declaration public float VolumePercent { get; set; } Property Value Type Description Single VolumeSaver TODO Declaration public SaveFloat VolumeSaver { get; } Property Value Type Description SaveFloat Methods Dispose() TODO Declaration public void Dispose()"
  },
  "api/OmiyaGames.Audio.AudioLayer.Spatial.html": {
    "href": "api/OmiyaGames.Audio.AudioLayer.Spatial.html",
    "title": "Class AudioLayer.Spatial | Omiya Games - Audio documentation",
    "keywords": "Class AudioLayer.Spatial Audio category applicable to ones predominately used in spatial context, i.e. sound effects and voices. Inheritance Object AudioLayer AudioLayer.SubLayer AudioLayer.Spatial Inherited Members AudioLayer.SubLayer.DefaultGroup AudioLayer.VolumeParam AudioLayer.PitchParam AudioLayer.VolumeSaver AudioLayer.IsMutedSaver AudioLayer.VolumeDb AudioLayer.VolumePercent AudioLayer.Pitch AudioLayer.IsMuted AudioLayer.Dispose() Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax [Serializable] public class Spatial : AudioLayer.SubLayer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0-pre.1 Date: 2/27/2022 Author: Taro Omiya Initial draft. Properties DefaultUiGroup TODO Declaration public AudioMixerGroup DefaultUiGroup { get; } Property Value Type Description AudioMixerGroup"
  },
  "api/OmiyaGames.Audio.AudioLayer.SubLayer.html": {
    "href": "api/OmiyaGames.Audio.AudioLayer.SubLayer.html",
    "title": "Class AudioLayer.SubLayer | Omiya Games - Audio documentation",
    "keywords": "Class AudioLayer.SubLayer A sublayer to AudioLayer Inheritance Object AudioLayer AudioLayer.SubLayer AudioLayer.Background AudioLayer.Spatial Inherited Members AudioLayer.VolumeParam AudioLayer.PitchParam AudioLayer.VolumeSaver AudioLayer.IsMutedSaver AudioLayer.VolumeDb AudioLayer.VolumePercent AudioLayer.Pitch AudioLayer.IsMuted AudioLayer.Dispose() Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public abstract class SubLayer : AudioLayer Properties DefaultGroup TODO Declaration public AudioMixerGroup DefaultGroup { get; } Property Value Type Description AudioMixerGroup"
  },
  "api/OmiyaGames.Audio.AudioManager.html": {
    "href": "api/OmiyaGames.Audio.AudioManager.html",
    "title": "Class AudioManager | Omiya Games - Audio documentation",
    "keywords": "Class AudioManager Inheritance Object AudioManager Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public static class AudioManager Fields ADDRESSABLE_NAME Name of the addressable. Declaration public const string ADDRESSABLE_NAME = \"AudioSettings\" Field Value Type Description String CONFIG_NAME The configuration name stored in Editor Settings. Declaration public const string CONFIG_NAME = \"com.omiyagames.audio\" Field Value Type Description String SIDEBAR_PATH The name this settings will appear in the Project Setting's left-sidebar. Declaration public const string SIDEBAR_PATH = \"Project/Omiya Games/Audio\" Field Value Type Description String UXML_PATH Path to UXML file. Declaration public const string UXML_PATH = \"Packages/com.omiyagames.audio/Editor/Audio.uxml\" Field Value Type Description String Properties Ambience TODO Declaration public static AudioLayer.Background Ambience { get; } Property Value Type Description AudioLayer.Background Main TODO Declaration public static AudioLayer Main { get; } Property Value Type Description AudioLayer Mixer TODO Declaration public static AudioMixer Mixer { get; } Property Value Type Description AudioMixer Music TODO Declaration public static AudioLayer.Background Music { get; } Property Value Type Description AudioLayer.Background MuteVolumeDb TODO Declaration public static float MuteVolumeDb { get; } Property Value Type Description Single SoundEffects TODO Declaration public static AudioLayer.Spatial SoundEffects { get; } Property Value Type Description AudioLayer.Spatial Status Indicates whether the manager is either still in the middle of setting up, or is already setup. Declaration public static Data.Status Status { get; } Property Value Type Description Data.Status Voices TODO Declaration public static AudioLayer.Spatial Voices { get; } Property Value Type Description AudioLayer.Spatial Methods ConvertPercentToVolumeDb(Single) TODO Declaration public static float ConvertPercentToVolumeDb(float percent) Parameters Type Name Description Single percent Returns Type Description Single Setup(Boolean) A coroutine to setup this manager. Declaration public static IEnumerator Setup(bool forceSetup = false) Parameters Type Name Description Boolean forceSetup Returns Type Description IEnumerator"
  },
  "api/OmiyaGames.Audio.AudioSettings.html": {
    "href": "api/OmiyaGames.Audio.AudioSettings.html",
    "title": "Class AudioSettings | Omiya Games - Audio documentation",
    "keywords": "Class AudioSettings Scriptable object with settings info. Inheritance Object AudioSettings Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class AudioSettings : BaseSettingsData Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0-pre.1 Date: 2/13/2022 Author: Taro Omiya Initial draft. Properties Ambience TODO Declaration public AudioLayer.Background Ambience { get; } Property Value Type Description AudioLayer.Background CurrentVersion Declaration public override int CurrentVersion { get; } Property Value Type Description Int32 Main TODO Declaration public AudioLayer Main { get; } Property Value Type Description AudioLayer Mixer The main mixer of this game. Declaration public AudioMixer Mixer { get; } Property Value Type Description AudioMixer Music TODO Declaration public AudioLayer.Background Music { get; } Property Value Type Description AudioLayer.Background MuteVolumeDb The volume in which Mixer interprets as mute. Declaration public float MuteVolumeDb { get; } Property Value Type Description Single PercentToDbCurve TODO Declaration public AnimationCurve PercentToDbCurve { get; } Property Value Type Description AnimationCurve SoundEffects TODO Declaration public AudioLayer.Spatial SoundEffects { get; } Property Value Type Description AudioLayer.Spatial TimeScaleSnapshots TODO Declaration public TimeScaleAudioModifiers[] TimeScaleSnapshots { get; } Property Value Type Description TimeScaleAudioModifiers [] Voices TODO Declaration public AudioLayer.Spatial Voices { get; } Property Value Type Description AudioLayer.Spatial Methods DefaultPercentToVolumeDbConversion(Single) The default percent to decibels converter, assuming mute-decibel is -80 dB. Declaration public static float DefaultPercentToVolumeDbConversion(float percent) Parameters Type Name Description Single percent Value from 0 to 1. Returns Type Description Single Volume, in decibels, where -80 dB is mute. OnUpgrade(Int32, out String) Declaration protected override bool OnUpgrade(int oldVersion, out string errorMessage) Parameters Type Name Description Int32 oldVersion String errorMessage Returns Type Description Boolean"
  },
  "api/OmiyaGames.Audio.Editor.AudioMenuItems.html": {
    "href": "api/OmiyaGames.Audio.Editor.AudioMenuItems.html",
    "title": "Class AudioMenuItems | Omiya Games - Audio documentation",
    "keywords": "Class AudioMenuItems Add menu items for creating audio scripts into the game. Inheritance Object AudioMenuItems Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class AudioMenuItems : MonoBehaviour Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0-pre.1 Date: 3/7/2022 Author: Taro Omiya Initial draft."
  },
  "api/OmiyaGames.Audio.Editor.AudioSettingsBuilder.html": {
    "href": "api/OmiyaGames.Audio.Editor.AudioSettingsBuilder.html",
    "title": "Class AudioSettingsBuilder | Omiya Games - Audio documentation",
    "keywords": "Class AudioSettingsBuilder Pre- and post-build script to add an instance of AudioSettings into the pre-loaded assets (and thus, build.) Inheritance Object AudioSettingsBuilder Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class AudioSettingsBuilder : BaseSettingsBuilder<AudioSettings> Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0-pre.1 Date: 2/16/2022 Author: Taro Omiya Initial verison. Properties ConfigName Declaration public override string ConfigName { get; } Property Value Type Description String"
  },
  "api/OmiyaGames.Audio.Editor.AudioSettingsEditor.html": {
    "href": "api/OmiyaGames.Audio.Editor.AudioSettingsEditor.html",
    "title": "Class AudioSettingsEditor | Omiya Games - Audio documentation",
    "keywords": "Class AudioSettingsEditor Editor for AudioSettings . Appears under inspector when selecting the asset. Inheritance Object AudioSettingsEditor Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class AudioSettingsEditor : SettingsEditor Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0-pre.1 Date: 2/16/2022 Author: Taro Omiya Initial version Properties SidebarDisplayPath Declaration public override string SidebarDisplayPath { get; } Property Value Type Description String UxmlPath Declaration public override string UxmlPath { get; } Property Value Type Description String"
  },
  "api/OmiyaGames.Audio.Editor.AudioSettingsProvider.html": {
    "href": "api/OmiyaGames.Audio.Editor.AudioSettingsProvider.html",
    "title": "Class AudioSettingsProvider | Omiya Games - Audio documentation",
    "keywords": "Class AudioSettingsProvider Editor for AudioSettings . Appears under the Project Settings window. Inheritance Object AudioSettingsProvider Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class AudioSettingsProvider : BaseSettingsEditor<AudioSettings> Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0-pre.1 Date: 2/16/2022 Author: Taro Omiya Initial verison. Constructors AudioSettingsProvider(String, IEnumerable<String>) Constructs a project-scoped . Declaration public AudioSettingsProvider(string path, IEnumerable<string> keywords) Parameters Type Name Description String path IEnumerable < String > keywords Properties AddressableGroupName Declaration public override string AddressableGroupName { get; } Property Value Type Description String AddressableName Declaration public override string AddressableName { get; } Property Value Type Description String ConfigName Declaration public override string ConfigName { get; } Property Value Type Description String DefaultSettingsFileName Declaration public override string DefaultSettingsFileName { get; } Property Value Type Description String HeaderText Declaration public override string HeaderText { get; } Property Value Type Description String HelpUrl Declaration public override string HelpUrl { get; } Property Value Type Description String UxmlPath Declaration public override string UxmlPath { get; } Property Value Type Description String Methods CreateSettingsProvider() Registers this . Declaration public static SettingsProvider CreateSettingsProvider() Returns Type Description SettingsProvider CustomizeEditSettingsTree(VisualElement, SerializedObject) Declaration protected override VisualElement CustomizeEditSettingsTree(VisualElement returnTree, SerializedObject serializedSettings) Parameters Type Name Description VisualElement returnTree SerializedObject serializedSettings Returns Type Description VisualElement"
  },
  "api/OmiyaGames.Audio.Editor.html": {
    "href": "api/OmiyaGames.Audio.Editor.html",
    "title": "Namespace OmiyaGames.Audio.Editor | Omiya Games - Audio documentation",
    "keywords": "Namespace OmiyaGames.Audio.Editor Classes AudioMenuItems Add menu items for creating audio scripts into the game. AudioSettingsBuilder Pre- and post-build script to add an instance of AudioSettings into the pre-loaded assets (and thus, build.) AudioSettingsEditor Editor for AudioSettings . Appears under inspector when selecting the asset. AudioSettingsProvider Editor for AudioSettings . Appears under the Project Settings window. SoundEffectEditor An editor to make it easier to edit SoundEffect scripts. TimeScaleAudioModifiersDrawer An editor to make it easier to edit TimeScaleAudioModifiers scripts."
  },
  "api/OmiyaGames.Audio.Editor.SoundEffectEditor.html": {
    "href": "api/OmiyaGames.Audio.Editor.SoundEffectEditor.html",
    "title": "Class SoundEffectEditor | Omiya Games - Audio documentation",
    "keywords": "Class SoundEffectEditor An editor to make it easier to edit SoundEffect scripts. Inheritance Object SoundEffectEditor Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class SoundEffectEditor : UnityEditor.Editor Remarks The MIT License (MIT) Copyright (c) 2014-2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 5/25/2015 Author: Taro Omiya Version: 1.0.0-pre.1 Date: 2/18/2022 Author: Taro Omiya Initial version. Moved to new package. Methods CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement See Also SoundEffect"
  },
  "api/OmiyaGames.Audio.Editor.TimeScaleAudioModifiersDrawer.html": {
    "href": "api/OmiyaGames.Audio.Editor.TimeScaleAudioModifiersDrawer.html",
    "title": "Class TimeScaleAudioModifiersDrawer | Omiya Games - Audio documentation",
    "keywords": "Class TimeScaleAudioModifiersDrawer An editor to make it easier to edit TimeScaleAudioModifiers scripts. Inheritance Object TimeScaleAudioModifiersDrawer Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class TimeScaleAudioModifiersDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 3/14/2022 Author: Taro Omiya Initial version. Methods CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement See Also TimeScaleAudioModifiers"
  },
  "api/OmiyaGames.Audio.html": {
    "href": "api/OmiyaGames.Audio.html",
    "title": "Namespace OmiyaGames.Audio | Omiya Games - Audio documentation",
    "keywords": "Namespace OmiyaGames.Audio Classes AudioLayer Base info on each audio category. AudioLayer.Background Audio category applicable to ones predominately used in the background, i.e. music and ambience. AudioLayer.Spatial Audio category applicable to ones predominately used in spatial context, i.e. sound effects and voices. AudioLayer.SubLayer A sublayer to AudioLayer AudioManager AudioSettings Scriptable object with settings info. SoundEffect A script for playing sound effects, with extra options such as clip, pitch, and volume mutation. Also allows configuring sound effects' volume. TimeScaleAudioModifiers Helper struct for params in AudioSettings . Enums SoundEffect.Layer"
  },
  "api/OmiyaGames.Audio.SoundEffect.html": {
    "href": "api/OmiyaGames.Audio.SoundEffect.html",
    "title": "Class SoundEffect | Omiya Games - Audio documentation",
    "keywords": "Class SoundEffect A script for playing sound effects, with extra options such as clip, pitch, and volume mutation. Also allows configuring sound effects' volume. Inheritance Object SoundEffect Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class SoundEffect : MonoBehaviour Remarks The MIT License (MIT) Copyright (c) 2014-2018 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 8/18/2015 Author: Taro Omiya Version: 1.0.0-pre.1 Date: 2/18/2022 Author: Taro Omiya Initial verison. Moved to new package. Fields MAX_LAYERS Declaration public const int MAX_LAYERS = 10 Field Value Type Description Int32 MAX_PITCH Declaration public const float MAX_PITCH = 3F Field Value Type Description Single MAX_VOLUME Declaration public const float MAX_VOLUME = 1F Field Value Type Description Single MIN_LAYERS Declaration public const int MIN_LAYERS = 1 Field Value Type Description Int32 MIN_PITCH Declaration public const float MIN_PITCH = -3F Field Value Type Description Single MIN_VOLUME Declaration public const float MIN_VOLUME = 0F Field Value Type Description Single Properties AllAudioLayers All attached audio sources, sorted with oldest source that played a SFX as first node. Declaration protected LinkedList<AudioSource> AllAudioLayers { get; } Property Value Type Description LinkedList < AudioSource > Remarks This is a write-able version of AllAudios . AllAudios All attached audio sources, sorted with oldest source that played a SFX as first node. Declaration public IReadOnlyCollection<AudioSource> AllAudios { get; } Property Value Type Description IReadOnlyCollection < AudioSource > AttachedSource Declaration protected AudioSource AttachedSource { get; } Property Value Type Description AudioSource ClipVariations A series of clips to play at random Declaration public RandomList<AudioClip> ClipVariations { get; } Property Value Type Description RandomList < AudioClip > IsMutatingPitch Whether this sound effect's pitch should be mutated Declaration public bool IsMutatingPitch { get; set; } Property Value Type Description Boolean IsMutatingVolume Whether this sound effect's volume should be mutated Declaration public bool IsMutatingVolume { get; set; } Property Value Type Description Boolean IsPausedOnTimeStop Declaration public bool IsPausedOnTimeStop { get; set; } Property Value Type Description Boolean LatestAudio The attached audio source that played the latest SFX. Declaration public AudioSource LatestAudio { get; } Property Value Type Description AudioSource NumberOfLayers The number of one-shot sounds this component will allow to overlap. Declaration public int NumberOfLayers { get; set; } Property Value Type Description Int32 OriginalPitch The original audio source's pitch, before mutation was applied. Declaration public float OriginalPitch { get; } Property Value Type Description Single OriginalVolume The original audio source's volume, before mutation was applied. Declaration public float OriginalVolume { get; } Property Value Type Description Single PitchMutationRange The allowed range the pitch can mutate from the center pitch Declaration public Vector2 PitchMutationRange { get; set; } Property Value Type Description Vector2 VolumeMutationRange The allowed range the volume can mutate from the center pitch Declaration public Vector2 VolumeMutationRange { get; set; } Property Value Type Description Vector2 Methods Pause(SoundEffect.Layer) Pauses the audio, which can be resumed later. Declaration public void Pause(SoundEffect.Layer layerToPause = SoundEffect.Layer.All) Parameters Type Name Description SoundEffect.Layer layerToPause See Also Play() UnPause(SoundEffect.Layer) Play() Plays an audio on the latest layer, based on whether LatestAudio 's flag is set to true . Note: this method does not resume a previously paused sound effect. Declaration public void Play() Remarks If LatestAudio 's flag is set to true , then this method checks to see the audio's state. If stopped, a random clip will play on loop, with mutation applied to pitch and volume if flagged to do so. If paused, it resumes the paused clip, with pitch and volume unchanged. Otherwise, this method does nothing. If LatestAudio 's flag is not set to true , then this method acts like . While this method attempts to play a sound effect on an audio layer that isn't playing anything, if all of them are playing or paused, this method will stop the audio layer that played the oldest clip, and play a new random clip instead. See Also Stop(SoundEffect.Layer) Pause(SoundEffect.Layer) Resume(SoundEffect.Layer) Resumes the audio if it was paused earlier. Declaration public void Resume(SoundEffect.Layer layerToResume = SoundEffect.Layer.All) Parameters Type Name Description SoundEffect.Layer layerToResume Remarks This method is an alias to UnPause(SoundEffect.Layer) . See Also Pause(SoundEffect.Layer) Stop(SoundEffect.Layer) Stops the audio, and rewind to the beginning. Declaration public void Stop(SoundEffect.Layer layerToStop = SoundEffect.Layer.All) Parameters Type Name Description SoundEffect.Layer layerToStop Which layer(s) to stop. See Also Play() UnPause(SoundEffect.Layer) Resumes the audio if it was paused earlier. Declaration public void UnPause(SoundEffect.Layer layerToUnPause = SoundEffect.Layer.All) Parameters Type Name Description SoundEffect.Layer layerToUnPause See Also Pause(SoundEffect.Layer)"
  },
  "api/OmiyaGames.Audio.SoundEffect.Layer.html": {
    "href": "api/OmiyaGames.Audio.SoundEffect.Layer.html",
    "title": "Enum SoundEffect.Layer | Omiya Games - Audio documentation",
    "keywords": "Enum SoundEffect.Layer Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public enum Layer Fields Name Description All Latest"
  },
  "api/OmiyaGames.Audio.TimeScaleAudioModifiers.html": {
    "href": "api/OmiyaGames.Audio.TimeScaleAudioModifiers.html",
    "title": "Class TimeScaleAudioModifiers | Omiya Games - Audio documentation",
    "keywords": "Class TimeScaleAudioModifiers Helper struct for params in AudioSettings . Inheritance Object TimeScaleAudioModifiers Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax [Serializable] public class TimeScaleAudioModifiers Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0-pre.1 Date: 3/7/2022 Author: Taro Omiya Initial draft. Properties DefaultSnapshot TODO Declaration public AudioMixerSnapshot DefaultSnapshot { get; } Property Value Type Description AudioMixerSnapshot EnableFast TODO Declaration public bool EnableFast { get; } Property Value Type Description Boolean EnablePause TODO Declaration public bool EnablePause { get; } Property Value Type Description Boolean EnableSlow TODO Declaration public bool EnableSlow { get; } Property Value Type Description Boolean FastPitchRange TODO Declaration public Vector2 FastPitchRange { get; } Property Value Type Description Vector2 FastTimeRange TODO Declaration public Vector2 FastTimeRange { get; } Property Value Type Description Vector2 FastTimeSnapshot TODO Declaration public AudioMixerSnapshot FastTimeSnapshot { get; } Property Value Type Description AudioMixerSnapshot Mixer TODO Declaration public AudioMixer Mixer { get; } Property Value Type Description AudioMixer PausedSnapshot TODO Declaration public AudioMixerSnapshot PausedSnapshot { get; } Property Value Type Description AudioMixerSnapshot PitchParam TODO Declaration public string PitchParam { get; } Property Value Type Description String SlowPitchRange TODO Declaration public Vector2 SlowPitchRange { get; } Property Value Type Description Vector2 SlowTimeRange TODO Declaration public Vector2 SlowTimeRange { get; } Property Value Type Description Vector2 SlowTimeSnapshot TODO Declaration public AudioMixerSnapshot SlowTimeSnapshot { get; } Property Value Type Description AudioMixerSnapshot"
  },
  "index.html": {
    "href": "index.html",
    "title": "Omiya Games - Audio | Omiya Games - Audio documentation",
    "keywords": "Omiya Games - Audio Audio is an experimental tools package by Omiya Games , to eventually provide a number of audio-related tools useful for game development. As of this writing, this package provides the following tools: Audio Manager The AudioManager is a script that interfaces with the project's Audio Mixer. Its settings are visible in the Project Settings window, like so: As a singleton class, audio manager allows the developer to adjust the volume and pitch for one of 5 potential audio groups in an Audio Mixer from nearly anywhere: Main - Adjusting the volume and pitch of this group will affect all audio. Music - Affects music playing both in the background, and within the game world (e.g. a radio.) Voices - Affects any spoken lines, grunts, and other human-like voices. Ambience - Affects any ambient sound effects, usually playing in the background. Sound Effects - Affects any other sound effects not covered by above groups. An example code will look something like below: using System.Collections; using UnityEngine; using OmiyaGames.Audio; public class VolumeExample : MonoBehaviour { // This tool adds a Sound Effect script [SerializeField] SoundEffect testSound; IEnumerator Start() { // IMPORTANT! Setting up audio manager is required for adjusting volume and pitch control. // This only needs to be called once throughout the entire game. // It is also safe, though not recommended, to call this function multiple times. yield return AudioManager.Setup(); // Adjust the volume like so, between 0f and 1f. // Note that this value *does* get saved in PlayerPrefs. // This means the next time user loads the game, and this script calls AudioManager.Setup(), // the VolumePercent will be updated to the value it was set to last time the game was open. AudioManager.Main.VolumePercent = 0.5f; // Playing sound is fairly simple testSound.Play(); yield return new WaitForSeconds(2f); // Adjusting for a different audio grou. // These values are also saved in PlayerPrefs. AudioManager.SoundEffects.VolumePercent = 0.5f; testSound.Play(); } } Audio manager also supports pitch-shifting and distortion effects in response to changes made to TimeManager . These effects utilizes the mixer's snapshots: A script utilizing these effects will look something like: using System.Collections; using UnityEngine; using OmiyaGames.Audio; using OmiyaGames.Managers; public class TimeEffectsExample : MonoBehaviour { [SerializeField] SoundEffect testSound; IEnumerator Start() { // IMPORTANT! Setting up audio manager is also required for time-related audio effects. yield return AudioManager.Setup(); // Pause the game to trigger the pause snapshots. TimeManager.IsManuallyPaused = true; testSound.Play(); yield return new WaitForSecondsRealtime(2f); TimeManager.IsManuallyPaused = false; // Changing timescale also changes the audio TimeManager.TimeScale = 0.5f; testSound.Play(); yield return new WaitForSecondsRealtime(2f); TimeManager.TimeScale = 1.5f; testSound.Play(); } } Sound Effect The SoundEffect script interfaces with an audio source to perform common tricks to create more varied sound effects. It is designed to add features to Unity's built-in AudioSource component: Note that an audio clip doesn't have to be added into the audio source for SoundEffect to work: the script will automatically choose a random clip from the clip variations list and set the audio source's clip. That said, if a clip has been added to the attached audio source, that will be added to the clip variations list on script awake, with a default Frequency of one. Lastly, most adjustments made to the attached audio source -- besides volume and pitch, if Mutate Volume and Mutate Pitch fields are checked, respectively -- will affect the sound played by SoundEffect , including all the overlapping sound effects generated by this script. Using the sound effect script in code is pretty simple: using System.Collections; using UnityEngine; using OmiyaGames.Audio; public class TimeEffectsExample : MonoBehaviour { [SerializeField] SoundEffect testSound; IEnumerator Start() { // Setting up audio manager so the sound effect will play at the right volume yield return AudioManager.Setup(); // Play a random clip in the clip variations list testSound.Play(); } } Also, sound effect can be directly added into the hierarchy via the Create... menu, both in the hierarchy window, and right-click context menu. This method has the added benefit of setting the audio source's output to the mixer group set in the Sound Effects settings under Audio Manager's Project Settings: Install This (we swear, one-time!) setup is a bit of a doozy. First, install the package via OpenUPM's command line tool , which handles installing this package and its many, many dependencies: If you haven't already installed OpenUPM , you can do so through Node.js's npm (obviously have Node.js installed in your system first): npm install -g openupm-cli Then, to install this package, just run the following command at the root of your Unity project: openupm add com.omiyagames.audio Open Unity. One of this package's dependency is Unity's Addressables , which needs setup: Select Window -> Asset Managerment -> Addressables -> Groups from the file menu bar. A pop-up with a single button will appear. Click Create Addressables Settings . After some new assets are created in the project, close the pop-up window. Addressables are now setup. Another dependency that needs setup is Omiya Games' Saves package: Select Edit -> Project Settings... from the file menu bar. On the left sidebar, select Omiya Games -> Saves . Click on Create... , and save the new package settings file to any location within the project's Assets folder Saves are now setup. Select Window -> Package Manager... from the file menu bar to open the package manager dock. Import this package's Custom Settings sample. Move all the imported files to a folder more accessible location. You will likely be editing these files during development. Select Edit -> Project Settings... from the file menu bar to open project settings dock again. On the left sidebar, select Omiya Games -> Audio . Drag-and-drop the imported settings file, Audio Settings - Custom , into the Active Settings field. With the window content drastically changed, scroll to the bottom of the settings window, and click the Add Savers To Saves Settings button. (Optional) In this sample, there are a lot of assets starting with the phrase, \" Savers - \". These files contains the default volume and mute settings for each audio category. It's recommended to edit these files' default values to your liking. Select File -> Save Project to save all the above settings. Resources Documentation Change Log LICENSE Overall package is licensed under MIT , unless otherwise noted in the 3rd party licenses file and/or source code. Copyright (c) 2019-2022 Omiya Games"
  },
  "manual/audioManager.html": {
    "href": "manual/audioManager.html",
    "title": "Audio Manager | Omiya Games - Audio documentation",
    "keywords": "Audio Manager Note: this manual page is a work-in-progress. The AudioManager is a script that interfaces with the project's Audio Mixer. Its settings are visible in the Project Settings window, like so: As a singleton class, audio manager allows the developer to adjust the volume and pitch for one of 5 potential audio groups in an Audio Mixer from nearly anywhere: Main - Adjusting the volume and pitch of this group will affect all audio. Music - Affects music playing both in the background, and within the game world (e.g. a radio.) Voices - Affects any spoken lines, grunts, and other human-like voices. Ambience - Affects any ambient sound effects, usually playing in the background. Sound Effects - Affects any other sound effects not covered by above groups. An example code will look something like below: using System.Collections; using UnityEngine; using OmiyaGames.Audio; public class VolumeExample : MonoBehaviour { // This tool adds a Sound Effect script [SerializeField] SoundEffect testSound; IEnumerator Start() { // IMPORTANT! Setting up audio manager is required for adjusting volume and pitch control. // This only needs to be called once throughout the entire game. // It is also safe, though not recommended, to call this function multiple times. yield return AudioManager.Setup(); // Adjust the volume like so, between 0f and 1f. // Note that this value *does* get saved in PlayerPrefs. // This means the next time user loads the game, and this script calls AudioManager.Setup(), // the VolumePercent will be updated to the value it was set to last time the game was open. AudioManager.Main.VolumePercent = 0.5f; // Playing sound is fairly simple testSound.Play(); yield return new WaitForSeconds(2f); // Adjusting for a different audio grou. // These values are also saved in PlayerPrefs. AudioManager.SoundEffects.VolumePercent = 0.5f; testSound.Play(); } } Time-Related Audio Distortions Audio manager also supports pitch-shifting and distortion effects in response to changes made to TimeManager . These effects utilizes the mixer's snapshots: A script utilizing these effects will look something like: using System.Collections; using UnityEngine; using OmiyaGames.Audio; using OmiyaGames.Managers; public class TimeEffectsExample : MonoBehaviour { [SerializeField] SoundEffect testSound; IEnumerator Start() { // IMPORTANT! Setting up audio manager is also required for time-related audio effects. yield return AudioManager.Setup(); // Pause the game to trigger the pause snapshots. TimeManager.IsManuallyPaused = true; testSound.Play(); yield return new WaitForSecondsRealtime(2f); TimeManager.IsManuallyPaused = false; // Changing timescale also changes the audio TimeManager.TimeScale = 0.5f; testSound.Play(); yield return new WaitForSecondsRealtime(2f); TimeManager.TimeScale = 1.5f; testSound.Play(); } }"
  },
  "manual/changelog.html": {
    "href": "manual/changelog.html",
    "title": "Change Log: | Omiya Games - Audio documentation",
    "keywords": "Change Log: 1.0.0-pre.1 Initial release: TODO!"
  },
  "manual/soundEffect.html": {
    "href": "manual/soundEffect.html",
    "title": "Sound Effect | Omiya Games - Audio documentation",
    "keywords": "Sound Effect Note: this manual page is a work-in-progress. The SoundEffect script interfaces with an audio source to perform common tricks to create more varied sound effects. It is designed to add features to Unity's built-in AudioSource component: Note that an audio clip doesn't have to be added into the audio source for SoundEffect to work: the script will automatically choose a random clip from the clip variations list and set the audio source's clip. That said, if a clip has been added to the attached audio source, that will be added to the clip variations list on script awake, with a default Frequency of one. Lastly, most adjustments made to the attached audio source -- besides volume and pitch, if Mutate Volume and Mutate Pitch fields are checked, respectively -- will affect the sound played by SoundEffect , including all the overlapping sound effects generated by this script. Using the sound effect script in code is pretty simple: using System.Collections; using UnityEngine; using OmiyaGames.Audio; public class TimeEffectsExample : MonoBehaviour { [SerializeField] SoundEffect testSound; IEnumerator Start() { // Setting up audio manager so the sound effect will play at the right volume yield return AudioManager.Setup(); // Play a random clip in the clip variations list testSound.Play(); } } Also, sound effect can be directly added into the hierarchy via the Create... menu, both in the hierarchy window, and right-click context menu. This method has the added benefit of setting the audio source's output to the mixer group set in the Sound Effects settings under Audio Manager's Project Settings:"
  }
}
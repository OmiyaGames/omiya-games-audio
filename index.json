{
  "api/OmiyaGames.Audio.AssetRef.html": {
    "href": "api/OmiyaGames.Audio.AssetRef.html",
    "title": "Class AssetRef | Omiya Games - Audio documentation",
    "keywords": "Class AssetRef Contains helper enums for AssetRef<TObject> . Inheritance Object AssetRef Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public static class AssetRef"
  },
  "api/OmiyaGames.Audio.AssetRef.State.html": {
    "href": "api/OmiyaGames.Audio.AssetRef.State.html",
    "title": "Enum AssetRef.State | Omiya Games - Audio documentation",
    "keywords": "Enum AssetRef.State Provides the state of AssetRef<TObject> , and whether it's referencing a project asset or addressable asset. Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public enum State Fields Name Description Loading Indicates AssetRef<TObject> references an addresable asset, and is in the middle of loading the asset. Null Indicates AssetRef<TObject> is null , and doesn't reference anything. ProjectAsset Indicates AssetRef<TObject> references an asset in the Unity project. Ready Indicates AssetRef<TObject> references an addresable asset, and has the asset loaded and ready to use. Unloaded Indicates AssetRef<TObject> references an addresable asset, and is currently unloaded."
  },
  "api/OmiyaGames.Audio.AssetRef-1.html": {
    "href": "api/OmiyaGames.Audio.AssetRef-1.html",
    "title": "Struct AssetRef<TObject> | Omiya Games - Audio documentation",
    "keywords": "Struct AssetRef<TObject> A common wrapper to an asset. Use this to represent Assets that could either be a direct reference to a project asset, or an addressable reference. Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public struct AssetRef<TObject> where TObject : UnityEngine.Object Type Parameters Name Description TObject Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 6/3/2022 Author: Taro Omiya Initial verison. Constructors AssetRef(TObject) Creates a wrapper for a project asset. Should not be used for addressable assets. Declaration public AssetRef(TObject asset) Parameters Type Name Description TObject asset The project asset. AssetRef(AssetReferenceT<TObject>) Creates a wrapper for an addressable asset. Declaration public AssetRef(AssetReferenceT<TObject> reference) Parameters Type Name Description AssetReferenceT <TObject> reference The addressable asset. Fields NULL Declaration public static readonly AssetRef<TObject> NULL Field Value Type Description AssetRef <TObject> Properties Asset If Reference is null , gets the referenced project asset. If not, and CurrentState is Ready , gets the loaded addressable asset from Reference . Otherwise, returns null . Declaration public TObject Asset { readonly get; } Property Value Type Description TObject CurrentState Indicates whether this object is null, project asset ( ProjectAsset ), or whether Reference has loaded or unloaded an asset. Declaration public readonly AssetRef.State CurrentState { get; } Property Value Type Description AssetRef.State Name Gets the name of the asset, or null if there isn't any. Declaration public readonly string Name { get; } Property Value Type Description String Reference Gets the addressable asset's reference, if constructed by Declaration public readonly AssetReferenceT<TObject> Reference { get; } Property Value Type Description AssetReferenceT <TObject> Methods Equals(TObject) Declaration public bool Equals(TObject other) Parameters Type Name Description TObject other Returns Type Description Boolean Equals(AssetReferenceT<TObject>) Declaration public bool Equals(AssetReferenceT<TObject> other) Parameters Type Name Description AssetReferenceT <TObject> other Returns Type Description Boolean Equals(AssetRef<TObject>) Declaration public bool Equals(AssetRef<TObject> other) Parameters Type Name Description AssetRef <TObject> other Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() LoadAssetAsync() Starts loading the addressable from Reference . Declaration public IEnumerator LoadAssetAsync() Returns Type Description IEnumerator A coroutine loading the addressable asset. ReleaseAsset() Unloads the addressable from Reference . Declaration public void ReleaseAsset() Operators Implicit(TObject to AssetRef<TObject>) Converts to AssetRef<TObject> . Declaration public static implicit operator AssetRef<TObject>(TObject convert) Parameters Type Name Description TObject convert Returns Type Description AssetRef <TObject> Implicit(AssetReferenceT<TObject> to AssetRef<TObject>) Converts to AssetRef<TObject> . Declaration public static implicit operator AssetRef<TObject>(AssetReferenceT<TObject> convert) Parameters Type Name Description AssetReferenceT <TObject> convert Returns Type Description AssetRef <TObject>"
  },
  "api/OmiyaGames.Audio.AssetRefSerialized-1.html": {
    "href": "api/OmiyaGames.Audio.AssetRefSerialized-1.html",
    "title": "Class AssetRefSerialized<TObject> | Omiya Games - Audio documentation",
    "keywords": "Class AssetRefSerialized<TObject> Helper serialized class to display in Unity inspector. Generates an AssetRef<TObject> . Inheritance Object AssetRefSerialized<TObject> Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class AssetRefSerialized<TObject> where TObject : UnityEngine.Object Type Parameters Name Description TObject Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 6/18/2022 Author: Taro Omiya Initial verison. Properties HasValue Indicates if asset is null or not. Declaration public bool HasValue { get; } Property Value Type Description Boolean Methods Create() Generates a new instance of AssetRef<TObject> . Declaration public AssetRef<TObject> Create() Returns Type Description AssetRef <TObject> Operators Implicit(AssetRefSerialized<TObject> to AssetRef<TObject>) Converts this object to a struct. Declaration public static implicit operator AssetRef<TObject>(AssetRefSerialized<TObject> convert) Parameters Type Name Description AssetRefSerialized <TObject> convert Returns Type Description AssetRef <TObject>"
  },
  "api/OmiyaGames.Audio.AudioHistory.AddArgs.html": {
    "href": "api/OmiyaGames.Audio.AudioHistory.AddArgs.html",
    "title": "Class AudioHistory.AddArgs | Omiya Games - Audio documentation",
    "keywords": "Class AudioHistory.AddArgs The event argument when calling Add(in AssetRef<BackgroundAudio>) . Inheritance Object EventArgs AudioHistory.AddArgs Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class AddArgs : EventArgs Constructors AddArgs(AssetRef<BackgroundAudio>) Constructs a new event argument. Declaration public AddArgs(AssetRef<BackgroundAudio> newAsset) Parameters Type Name Description AssetRef < BackgroundAudio > newAsset Sets Asset . Properties Asset Gets the asset added to the history. Declaration public AssetRef<BackgroundAudio> Asset { get; } Property Value Type Description AssetRef < BackgroundAudio >"
  },
  "api/OmiyaGames.Audio.AudioHistory.html": {
    "href": "api/OmiyaGames.Audio.AudioHistory.html",
    "title": "Class AudioHistory | Omiya Games - Audio documentation",
    "keywords": "Class AudioHistory Retains a history of BackgroundAudio , capped by MaxCapacity . Inheritance Object AudioHistory Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class AudioHistory : IReadOnlyList<AssetRef<BackgroundAudio>> Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 6/17/2022 Author: Taro Omiya Initial verison. Constructors AudioHistory(Int32) Constructs a new history with a specified capacity. Declaration public AudioHistory(int maxCapacity = 100) Parameters Type Name Description Int32 maxCapacity The maximum capacity of the history. Fields DEFAULT_HISTORY_SIZE Default history size. Declaration public const int DEFAULT_HISTORY_SIZE = 100 Field Value Type Description Int32 Properties Count How many entries are currently in the history. Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Gets a specific audio clip, index place from oldest entry in the history. Declaration public AssetRef<BackgroundAudio> this[int index] { get; } Parameters Type Name Description Int32 index Placement from oldest entry, up. Property Value Type Description AssetRef < BackgroundAudio > The BackgroundAudio , index place from oldest entry. Remarks This property's performance is O(n). It does attempt to iterate either in chronological or reverse order, whichever is faster. This does make getting the newest or oldest entries a O(1) operation. Exceptions Type Condition IndexOutOfRangeException If index is negative or greater or equal to Count MaxCapacity Gets or sets the maximum capacity of this history. Declaration public int MaxCapacity { get; set; } Property Value Type Description Int32 Newest Grabs the newest entry in the history. Declaration public AssetRef<BackgroundAudio> Newest { get; } Property Value Type Description AssetRef < BackgroundAudio > Oldest Grabs the oldest entry in the history. Declaration public AssetRef<BackgroundAudio> Oldest { get; } Property Value Type Description AssetRef < BackgroundAudio > Methods Add(in AssetRef<BackgroundAudio>) Adds an asset to the history as the newest entry. Declaration public void Add(in AssetRef<BackgroundAudio> asset) Parameters Type Name Description AssetRef < BackgroundAudio > asset Newest asset to add to the history. Clear() Empties the history. Declaration public void Clear() Contains(in AssetRef<BackgroundAudio>) Indicates if a specific asset is already in the history. Declaration public bool Contains(in AssetRef<BackgroundAudio> asset) Parameters Type Name Description AssetRef < BackgroundAudio > asset The audio clip to search in the history. Returns Type Description Boolean true if asset is in the history; false , otherwise. GetEnumerator() Declaration public IEnumerator<AssetRef<BackgroundAudio>> GetEnumerator() Returns Type Description IEnumerator < AssetRef < BackgroundAudio >> GetEnumerator(Boolean) Gets an iterator in either chronological or reverse history order. Declaration public IEnumerator<AssetRef<BackgroundAudio>> GetEnumerator(bool newestToOldest) Parameters Type Name Description Boolean newestToOldest If true , enumerates the history in reverse order. Otherwise, iteraates in the chronological order. Returns Type Description IEnumerator < AssetRef < BackgroundAudio >> Iterator through the whole history. RemoveNewest() Removes the newest entry in the history. Declaration public void RemoveNewest() Remarks Does nothing if history is empty. RemoveOldest() Removes the oldest entry in the history. Declaration public void RemoveOldest() Remarks Does nothing if history is empty. Events OnAfterAdd Event called by Add(in AssetRef<BackgroundAudio>) , after a new asset has been added to the history. Declaration public event AudioHistory.OnAdd OnAfterAdd Event Type Type Description AudioHistory.OnAdd OnAfterClear Event called by Clear() , after the history has been cleared. Declaration public event Action<AudioHistory> OnAfterClear Event Type Type Description Action < AudioHistory > OnAfterRemove Event called by RemoveOldest() and RemoveNewest() , after an asset has been removed from the history. Declaration public event AudioHistory.OnRemove OnAfterRemove Event Type Type Description AudioHistory.OnRemove Remarks This event does not get called by Clear() . Use OnAfterClear to listen to that event. OnBeforeAdd Event called by Add(in AssetRef<BackgroundAudio>) , before a new asset is added to the history. Declaration public event AudioHistory.OnAdd OnBeforeAdd Event Type Type Description AudioHistory.OnAdd OnBeforeClear Event called by Clear() , before the history is cleared. Declaration public event Action<AudioHistory> OnBeforeClear Event Type Type Description Action < AudioHistory > OnBeforeRemove Event called by RemoveOldest() and RemoveNewest() , before an asset is removed from the history. Declaration public event AudioHistory.OnRemove OnBeforeRemove Event Type Type Description AudioHistory.OnRemove Remarks This event does not get called by Clear() . Use OnBeforeClear to listen to that event. See Also AssetRef <TObject>"
  },
  "api/OmiyaGames.Audio.AudioHistory.OnAdd.html": {
    "href": "api/OmiyaGames.Audio.AudioHistory.OnAdd.html",
    "title": "Delegate AudioHistory.OnAdd | Omiya Games - Audio documentation",
    "keywords": "Delegate AudioHistory.OnAdd Standard format for events called by Add(in AssetRef<BackgroundAudio>) . Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public delegate void OnAdd(AudioHistory source, AudioHistory.AddArgs args); Parameters Type Name Description AudioHistory source The caller of this event. AudioHistory.AddArgs args Arguments for this event."
  },
  "api/OmiyaGames.Audio.AudioHistory.OnRemove.html": {
    "href": "api/OmiyaGames.Audio.AudioHistory.OnRemove.html",
    "title": "Delegate AudioHistory.OnRemove | Omiya Games - Audio documentation",
    "keywords": "Delegate AudioHistory.OnRemove Standard format for events called by RemoveOldest() and RemoveNewest() . Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public delegate void OnRemove(AudioHistory source, AudioHistory.RemoveArgs args); Parameters Type Name Description AudioHistory source The caller of this event. AudioHistory.RemoveArgs args Arguments for this event."
  },
  "api/OmiyaGames.Audio.AudioHistory.RemoveArgs.html": {
    "href": "api/OmiyaGames.Audio.AudioHistory.RemoveArgs.html",
    "title": "Class AudioHistory.RemoveArgs | Omiya Games - Audio documentation",
    "keywords": "Class AudioHistory.RemoveArgs The event argument when calling RemoveOldest() or RemoveNewest() . Inheritance Object EventArgs AudioHistory.RemoveArgs Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class RemoveArgs : EventArgs Constructors RemoveArgs(AssetRef<BackgroundAudio>, Boolean) Constructs a new event argument. Declaration public RemoveArgs(AssetRef<BackgroundAudio> removedAsset, bool isOldestRemoved) Parameters Type Name Description AssetRef < BackgroundAudio > removedAsset Sets Asset . Boolean isOldestRemoved Sets IsOldestRemoved . Properties Asset Gets the asset removed from the history. Declaration public AssetRef<BackgroundAudio> Asset { get; } Property Value Type Description AssetRef < BackgroundAudio > IsOldestRemoved Returns true if event was called by RemoveOldest() . If the event was called by RemoveNewest() instead, returns false . Declaration public bool IsOldestRemoved { get; } Property Value Type Description Boolean"
  },
  "api/OmiyaGames.Audio.AudioLayer.Background.html": {
    "href": "api/OmiyaGames.Audio.AudioLayer.Background.html",
    "title": "Class AudioLayer.Background | Omiya Games - Audio documentation",
    "keywords": "Class AudioLayer.Background Audio category applicable to ones predominately used in the background, i.e. music and ambience. Inheritance Object AudioLayer AudioLayer.SubLayer AudioLayer.Background Inherited Members AudioLayer.SubLayer.DefaultGroup AudioLayer.VolumeParam AudioLayer.PitchParam AudioLayer.VolumeSaver AudioLayer.IsMutedSaver AudioLayer.VolumeDb AudioLayer.VolumePercent AudioLayer.Pitch AudioLayer.IsMuted AudioLayer.Dispose() Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax [Serializable] public class Background : AudioLayer.SubLayer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp.1 Date: 2/27/2022 Author: Taro Omiya Initial draft. Version: 1.0.0 Date: 6/3/2022 Author: Taro Omiya Adding properties and methods that utilizes to fade in and out BackgroundAudio s. Also added a History tracker. Properties CurrentFile Grabs the currently-playing audio file from History . Declaration public AssetRef<BackgroundAudio> CurrentFile { get; } Property Value Type Description AssetRef < BackgroundAudio > CurrentPlayer Grabs the currently-playing audio file from History . Declaration public BackgroundAudio.Player CurrentPlayer { get; } Property Value Type Description BackgroundAudio.Player History Gets the history of BackgroundAudio played. Declaration public AudioHistory History { get; } Property Value Type Description AudioHistory Remarks No properties adds BackgroundAudio to this history tracker automatically. As such, if you're not using the helper methods within this class (e.g. ), don't forget to update this property as well. MixerGroupManager Gets the manager of s and handles which group BackgroundAudio.Player should play on. Declaration public MixerGroupManager MixerGroupManager { get; } Property Value Type Description MixerGroupManager PlayerManager Gets the manager of BackgroundAudio and the BackgroundAudio.Player s generated by them. Declaration public AudioPlayerManager PlayerManager { get; } Property Value Type Description AudioPlayerManager Methods CreateManagers(Transform, String, AnimationCurve) Sets up PlayerManager and MixerGroupManager . Required to be called with OmiyaGames.Audio.AudioLayer.Setup . Declaration public void CreateManagers(Transform parentTransform, string gameObjectName, AnimationCurve percentToDbCurve) Parameters Type Name Description Transform parentTransform The transform to create a new under. String gameObjectName The name of the newly created . AnimationCurve percentToDbCurve The curve used to convert a fraction from 0 to 1 , to decibels. FadeInCurrentPlayingCoroutine(FadeInArgs, AudioLayer.Background.OnCoroutineFinished) Fades in the currently-playing audio in this layer. Declaration public IEnumerator FadeInCurrentPlayingCoroutine(FadeInArgs fadeInArgs = null, AudioLayer.Background.OnCoroutineFinished onFinish = null) Parameters Type Name Description FadeInArgs fadeInArgs AudioLayer.Background.OnCoroutineFinished onFinish Returns Type Description IEnumerator FadeOutCurrentPlaying(FadeOutArgs, BackgroundAudio.Player[]) Fades out the currently-playing audio in this layer. Declaration public void FadeOutCurrentPlaying(FadeOutArgs fadeOutArgs = null, params BackgroundAudio.Player[] except) Parameters Type Name Description FadeOutArgs fadeOutArgs Details on how to fade-out, e.g. how long it should last. BackgroundAudio.Player [] except Players not to fade out. GetCurrentPlayer(AudioPlayerManager.AudioState) Grab the first player associated with CurrentFile Declaration public BackgroundAudio.Player GetCurrentPlayer(AudioPlayerManager.AudioState state = AudioPlayerManager.AudioState.All) Parameters Type Name Description AudioPlayerManager.AudioState state The state to filter players by. Returns Type Description BackgroundAudio.Player The first BackgroundAudio.Player s with the same state as state . Remarks Order (and thus, what's determined as \"the first player\") is dependent upon , and which player is running on which layer. GetCurrentPlayers(AudioPlayerManager.AudioState) Grab all the players associated with CurrentFile Declaration public List<BackgroundAudio.Player> GetCurrentPlayers(AudioPlayerManager.AudioState state = AudioPlayerManager.AudioState.All) Parameters Type Name Description AudioPlayerManager.AudioState state The state to filter players by. Returns Type Description List < BackgroundAudio.Player > All the currently active BackgroundAudio.Player s with the same state as state . PlayNextCoroutine(AssetRef<BackgroundAudio>, FadeInArgs, FadeOutArgs, AudioLayer.Background.OnCoroutineFinished) Coroutine to fade in the next background audio. Also adds audioClip into the history if played. Declaration public IEnumerator PlayNextCoroutine(AssetRef<BackgroundAudio> audioClip, FadeInArgs fadeInArgs = null, FadeOutArgs fadeOutArgs = null, AudioLayer.Background.OnCoroutineFinished onFinish = null) Parameters Type Name Description AssetRef < BackgroundAudio > audioClip The clip to play FadeInArgs fadeInArgs Details on how to fade-in, e.g. how long it should last. FadeOutArgs fadeOutArgs Details on how to fade-out, e.g. how long it should last. AudioLayer.Background.OnCoroutineFinished onFinish Triggers as soon as this coroutine finishes, with a reference to the player that will be faded in. Returns Type Description IEnumerator A coroutine for loading audioClip . Remarks This coroutine needs to be yielded on regardless of whether audioClip points to an addressable or not. Exceptions Type Condition ArgumentNullException If audioClip 's CurrentState is Null . PlayPreviousCoroutine(FadeInArgs, FadeOutArgs, AudioLayer.Background.OnCoroutineFinished) Coroutine to fade in the previous background audio in History , if any. Also removes the newest clip from the history, if played. Declaration public IEnumerator PlayPreviousCoroutine(FadeInArgs fadeInArgs = null, FadeOutArgs fadeOutArgs = null, AudioLayer.Background.OnCoroutineFinished onFinish = null) Parameters Type Name Description FadeInArgs fadeInArgs Details on how to fade-in, e.g. how long it should last. FadeOutArgs fadeOutArgs Details on how to fade-out, e.g. how long it should last. AudioLayer.Background.OnCoroutineFinished onFinish Triggers as soon as this coroutine finishes, with a reference to the player that will be faded in. The parameter will be null if audioClip isn't played (e.g. there isn't an audio clip in the history.) Returns Type Description IEnumerator A coroutine for loading the previous BackgroundAudio . Remarks This coroutine needs to be yielded on regardless of whether the previous clip points to an addressable or not."
  },
  "api/OmiyaGames.Audio.AudioLayer.Background.OnCoroutineFinished.html": {
    "href": "api/OmiyaGames.Audio.AudioLayer.Background.OnCoroutineFinished.html",
    "title": "Delegate AudioLayer.Background.OnCoroutineFinished | Omiya Games - Audio documentation",
    "keywords": "Delegate AudioLayer.Background.OnCoroutineFinished Called at the end of s called by AudioLayer.Background . Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public delegate void OnCoroutineFinished(AudioLayer.Background source, AudioLayer.PlayerArgs args); Parameters Type Name Description AudioLayer.Background source Source of where the coroutine was started. AudioLayer.PlayerArgs args The BackgroundAudio.Player selected for the , if any."
  },
  "api/OmiyaGames.Audio.AudioLayer.html": {
    "href": "api/OmiyaGames.Audio.AudioLayer.html",
    "title": "Class AudioLayer | Omiya Games - Audio documentation",
    "keywords": "Class AudioLayer Base info on each audio category. Inheritance Object AudioLayer AudioLayer.SubLayer Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class AudioLayer : IDisposable Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp.1 Date: 2/27/2022 Author: Taro Omiya Initial draft. Version: 1.0.0 Date: 6/21/2022 Author: Taro Omiya Adding documentation. Properties IsMuted Gets or sets whether this layer is muted. Declaration public bool IsMuted { get; set; } Property Value Type Description Boolean IsMutedSaver The settings to store user's mute preferences. Declaration public SaveBool IsMutedSaver { get; } Property Value Type Description SaveBool Remarks This value is changed in Unity's Project Settings dialog. See Also IsMuted Pitch Gets or sets the pitch of this layer. Declaration public float Pitch { get; set; } Property Value Type Description Single PitchParam The parameter name to change 's pitch. Declaration public string PitchParam { get; } Property Value Type Description String Remarks This value is changed in Unity's Project Settings dialog. VolumeDb Gets the volume of this layer, in decibels. Declaration public float VolumeDb { get; } Property Value Type Description Single See Also VolumePercent VolumeParam The parameter name to change 's volume. Declaration public string VolumeParam { get; } Property Value Type Description String Remarks This value is changed in Unity's Project Settings dialog. VolumePercent Gets or sets the volume of this layer as a fraction between 0 and 1 . Declaration public float VolumePercent { get; set; } Property Value Type Description Single See Also VolumeDb VolumeSaver The settings to store user's volume preferences. Declaration public SaveFloat VolumeSaver { get; } Property Value Type Description SaveFloat Remarks This value is changed in Unity's Project Settings dialog. See Also VolumePercent Methods Dispose() Cleans-up any events this object was listening to. Declaration public void Dispose()"
  },
  "api/OmiyaGames.Audio.AudioLayer.PlayerArgs.html": {
    "href": "api/OmiyaGames.Audio.AudioLayer.PlayerArgs.html",
    "title": "Class AudioLayer.PlayerArgs | Omiya Games - Audio documentation",
    "keywords": "Class AudioLayer.PlayerArgs Event arguments for fading in a BackgroundAudio.Player Inheritance Object EventArgs AudioLayer.PlayerArgs Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class PlayerArgs : EventArgs Constructors PlayerArgs() Constructs a null argument. Declaration public PlayerArgs() PlayerArgs(BackgroundAudio.Player, AudioLayer.PlayerArgs.PlayerState) Constructs a new argument instance. Declaration public PlayerArgs(BackgroundAudio.Player player, AudioLayer.PlayerArgs.PlayerState state) Parameters Type Name Description BackgroundAudio.Player player Sets Player property. AudioLayer.PlayerArgs.PlayerState state Sets State property. Properties Player Gets the selected BackgroundAudio.Player . Declaration public BackgroundAudio.Player Player { get; } Property Value Type Description BackgroundAudio.Player State Gets the reason Player was selected. Declaration public AudioLayer.PlayerArgs.PlayerState State { get; } Property Value Type Description AudioLayer.PlayerArgs.PlayerState"
  },
  "api/OmiyaGames.Audio.AudioLayer.PlayerArgs.PlayerState.html": {
    "href": "api/OmiyaGames.Audio.AudioLayer.PlayerArgs.PlayerState.html",
    "title": "Enum AudioLayer.PlayerArgs.PlayerState | Omiya Games - Audio documentation",
    "keywords": "Enum AudioLayer.PlayerArgs.PlayerState Indicates how the BackgroundAudio.Player was selected. Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public enum PlayerState Fields Name Description AlreadyPlayingClip Selected a BackgroundAudio.Player that was already playing the same clip. NewPlayer BackgroundAudio.Player was newly created. Null BackgroundAudio.Player is null . StoppedPlayer Selected a BackgroundAudio.Player that was stopped."
  },
  "api/OmiyaGames.Audio.AudioLayer.Spatial.html": {
    "href": "api/OmiyaGames.Audio.AudioLayer.Spatial.html",
    "title": "Class AudioLayer.Spatial | Omiya Games - Audio documentation",
    "keywords": "Class AudioLayer.Spatial Audio category applicable to ones predominately used in spatial context, i.e. sound effects and voices. Inheritance Object AudioLayer AudioLayer.SubLayer AudioLayer.Spatial Inherited Members AudioLayer.SubLayer.DefaultGroup AudioLayer.VolumeParam AudioLayer.PitchParam AudioLayer.VolumeSaver AudioLayer.IsMutedSaver AudioLayer.VolumeDb AudioLayer.VolumePercent AudioLayer.Pitch AudioLayer.IsMuted AudioLayer.Dispose() Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax [Serializable] public class Spatial : AudioLayer.SubLayer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp.1 Date: 2/27/2022 Author: Taro Omiya Initial draft. Version: 1.0.0-exp.1 Date: 6/21/2022 Author: Taro Omiya Adding documentation. Properties DefaultUiGroup The default mixer group to apply to a new instance of an audio script created on a UI element in a scene. Declaration public AudioMixerGroup DefaultUiGroup { get; } Property Value Type Description AudioMixerGroup Remarks This value is changed in Unity's Project Settings dialog."
  },
  "api/OmiyaGames.Audio.AudioLayer.SubLayer.html": {
    "href": "api/OmiyaGames.Audio.AudioLayer.SubLayer.html",
    "title": "Class AudioLayer.SubLayer | Omiya Games - Audio documentation",
    "keywords": "Class AudioLayer.SubLayer A sublayer to AudioLayer Inheritance Object AudioLayer AudioLayer.SubLayer AudioLayer.Background AudioLayer.Spatial Inherited Members AudioLayer.VolumeParam AudioLayer.PitchParam AudioLayer.VolumeSaver AudioLayer.IsMutedSaver AudioLayer.VolumeDb AudioLayer.VolumePercent AudioLayer.Pitch AudioLayer.IsMuted AudioLayer.Dispose() Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public abstract class SubLayer : AudioLayer Properties DefaultGroup The default mixer group to apply to a new instance of an audio script created in a scene. Declaration public AudioMixerGroup DefaultGroup { get; } Property Value Type Description AudioMixerGroup Remarks This value is changed in Unity's Project Settings dialog."
  },
  "api/OmiyaGames.Audio.AudioManager.html": {
    "href": "api/OmiyaGames.Audio.AudioManager.html",
    "title": "Class AudioManager | Omiya Games - Audio documentation",
    "keywords": "Class AudioManager A manager file that allows adjusting an from settings. Inheritance Object AudioManager Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public static class AudioManager Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp.1 Date: 2/12/2022 Author: Taro Omiya Initial verison. Version: 1.0.0-exp.1 Date: 6/21/2022 Author: Taro Omiya Adding more helper methods and documentation. Fields ADDRESSABLE_NAME Name of the addressable. Declaration public const string ADDRESSABLE_NAME = \"AudioSettings\" Field Value Type Description String CONFIG_NAME The configuration name stored in Editor Settings. Declaration public const string CONFIG_NAME = \"com.omiyagames.audio\" Field Value Type Description String SIDEBAR_PATH The name this settings will appear in the Project Setting's left-sidebar. Declaration public const string SIDEBAR_PATH = \"Project/Omiya Games/Audio\" Field Value Type Description String UXML_PATH Path to UXML file. Declaration public const string UXML_PATH = \"Packages/com.omiyagames.audio/Editor/Audio.uxml\" Field Value Type Description String Properties Ambience The background ambience layer. Allows playing and managing BackgroundAudio clips. Declaration public static AudioLayer.Background Ambience { get; } Property Value Type Description AudioLayer.Background Main The main layer of audio. This affects the volume and pitch of all audio sources wired to any layer in this manager. Declaration public static AudioLayer Main { get; } Property Value Type Description AudioLayer Mixer The main mixer of this game. Declaration public static AudioMixer Mixer { get; } Property Value Type Description AudioMixer Music The background music layer. Allows playing and managing BackgroundAudio clips. Declaration public static AudioLayer.Background Music { get; } Property Value Type Description AudioLayer.Background MuteVolumeDb The volume considered low enough to be \"mute\" according to Mixer . Declaration public static float MuteVolumeDb { get; } Property Value Type Description Single SoundEffects The layer dedicated to sound effects. This affects the volume and pitch of any audio sources wired to DefaultUiGroup or DefaultGroup . Declaration public static AudioLayer.Spatial SoundEffects { get; } Property Value Type Description AudioLayer.Spatial Status Indicates whether the manager is either still in the middle of setting up, or is already setup. Declaration public static Data.Status Status { get; } Property Value Type Description Data.Status Voices The layer dedicated to voices. This affects the volume and pitch of any audio sources wired to DefaultUiGroup or DefaultGroup . Declaration public static AudioLayer.Spatial Voices { get; } Property Value Type Description AudioLayer.Spatial Methods CalculateClipLengthSeconds(AudioClip) Calculates how long an is, in seconds. Declaration public static double CalculateClipLengthSeconds(AudioClip clip) Parameters Type Name Description AudioClip clip Clip to calculate the duration of. Returns Type Description Double How long clip is, in seconds. Exceptions Type Condition ArgumentNullException If clip is null . CalculateTimeSample(AudioClip, Double) Calculates which a time stamp falls on . Declaration public static int CalculateTimeSample(AudioClip clip, double timeStamp) Parameters Type Name Description AudioClip clip Clip to process. Double timeStamp The timestamp on the clip , in seconds. Returns Type Description Int32 The time sample timeStamp falls in. Exceptions Type Condition ArgumentNullException If clip is null ArgumentOutOfRangeException If timeStamp is negative or larger than the length of clip . ConvertPercentToVolumeDb(Single) Converts a fraction between 0 and 1 to decibels. Declaration public static float ConvertPercentToVolumeDb(float percent) Parameters Type Name Description Single percent The fraction between 0 and 1 . Returns Type Description Single Equivalent decibel value. Setup(Boolean) Sets up this manager as a coroutine. Declaration public static IEnumerator Setup(bool forceSetup = false) Parameters Type Name Description Boolean forceSetup If set to true , forces setting up this manager from scratch. Otherwise, checks whether the manager has been setup or not; if not, runs the setup process. Returns Type Description IEnumerator Coroutine to setup this manager. Remarks Always, always call this method first before using this manager. It is OK to call this method multiple time."
  },
  "api/OmiyaGames.Audio.AudioPlayerManager.AudioState.html": {
    "href": "api/OmiyaGames.Audio.AudioPlayerManager.AudioState.html",
    "title": "Enum AudioPlayerManager.AudioState | Omiya Games - Audio documentation",
    "keywords": "Enum AudioPlayerManager.AudioState An equivalent of BackgroundAudio.PlayState , where multiple values can be combined like a flag. Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax [Flags] public enum AudioState : byte Fields Name Description All Represents all the flags in this enum. None Empty flags. Represents no state. Playing Equivalent of Playing . Matches any BackgroundAudio.Player s that's playing. Scheduled Equivalent of Scheduled . Matches any BackgroundAudio.Player s that scheduled to play at a later point. Stopped Equivalent of Stopped . Matches any BackgroundAudio.Player s that's stopped."
  },
  "api/OmiyaGames.Audio.AudioPlayerManager.html": {
    "href": "api/OmiyaGames.Audio.AudioPlayerManager.html",
    "title": "Class AudioPlayerManager | Omiya Games - Audio documentation",
    "keywords": "Class AudioPlayerManager Handles managing BackgroundAudio.Player s, including generating and auto-removing unused players. Generally used like a , where BackgroundAudio is mapped to a list of BackgroundAudio.Player s. Inheritance Object AudioPlayerManager Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class AudioPlayerManager : MonoBehaviour Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 5/22/2022 Author: Taro Omiya Initial verison. Properties GarbageCollectAfterSeconds Gets or sets how long an idle (basically, stopped) BackgroundAudio.Player remains in memory before being auto-deleted by this manager. Declaration public float GarbageCollectAfterSeconds { get; set; } Property Value Type Description Single Methods CreateManager(Transform, String) Creates a new , and attaching an instance of AudioPlayerManager . Declaration public static AudioPlayerManager CreateManager(Transform parent, string gameObjectName) Parameters Type Name Description Transform parent The this manager will be added as a child to. Can be null String gameObjectName The name of the new that's created by this method. Returns Type Description AudioPlayerManager A new instance of AudioPlayerManager , attached by a new , which is a child of parent . CreatePlayerCoroutine(AssetRef<BackgroundAudio>, Action<BackgroundAudio.Player>) Starts a coroutine that generates a new BackgroundAudio.Player from audio . Declaration public IEnumerator CreatePlayerCoroutine(AssetRef<BackgroundAudio> audio, Action<BackgroundAudio.Player> onPlayerCreated = null) Parameters Type Name Description AssetRef < BackgroundAudio > audio The audio file that generates players. Action < BackgroundAudio.Player > onPlayerCreated Delegate that triggers at the end of this coroutine. Argument will be set to the newly generated BackgroundAudio.Player . Returns Type Description IEnumerator A coroutine that creates a new BackgroundAudio.Player . Exceptions Type Condition ArgumentNullException If audio 's state is Null . GarbageCollect(AudioPlayerManager.AudioState) Destroys any BackgroundAudio.Player s that has the same state as destroyPlayersWithStates . Declaration public void GarbageCollect(AudioPlayerManager.AudioState destroyPlayersWithStates = AudioPlayerManager.AudioState.Stopped) Parameters Type Name Description AudioPlayerManager.AudioState destroyPlayersWithStates The state of BackgroundAudio.Player s to destroy. GetPlayer(AssetRef<BackgroundAudio>, AudioPlayerManager.AudioState) Gets the first BackgroundAudio.Player associated with an audio asset at a specific state. Declaration public BackgroundAudio.Player GetPlayer(AssetRef<BackgroundAudio> audio, AudioPlayerManager.AudioState playerState = AudioPlayerManager.AudioState.All) Parameters Type Name Description AssetRef < BackgroundAudio > audio The audio file that generates players. AudioPlayerManager.AudioState playerState Filters BackgroundAudio.Player s based on state. Returns Type Description BackgroundAudio.Player The first BackgroundAudio.Player that plays the audio clips from audio that is in the same state as playerState . Returns null if none is found. Exceptions Type Condition ArgumentNullException If audio 's state is Null . See Also GetPlayers(AssetRef<BackgroundAudio>, AudioPlayerManager.AudioState) GetPlayers(AssetRef<BackgroundAudio>, AudioPlayerManager.AudioState, in List<BackgroundAudio.Player>) GetPlayers(AssetRef<BackgroundAudio>, AudioPlayerManager.AudioState) Gets a list of players associated with audio , filtered by playerState . This method creates a new . Declaration public List<BackgroundAudio.Player> GetPlayers(AssetRef<BackgroundAudio> audio, AudioPlayerManager.AudioState playerState = AudioPlayerManager.AudioState.All) Parameters Type Name Description AssetRef < BackgroundAudio > audio The audio file that generates players. AudioPlayerManager.AudioState playerState Filters BackgroundAudio.Player s based on state. Returns Type Description List < BackgroundAudio.Player > List of BackgroundAudio.Player s associated with audio , and has the same state as playerState . Exceptions Type Condition ArgumentNullException If audio 's state is Null . See Also GetPlayers(AssetRef<BackgroundAudio>, AudioPlayerManager.AudioState, in List<BackgroundAudio.Player>) GetPlayers(AssetRef<BackgroundAudio>, AudioPlayerManager.AudioState, in List<BackgroundAudio.Player>) Gets a list of players associated with audio , filtered by playerState . This method recycles a . Declaration public void GetPlayers(AssetRef<BackgroundAudio> audio, AudioPlayerManager.AudioState playerState, in List<BackgroundAudio.Player> returnPlayers) Parameters Type Name Description AssetRef < BackgroundAudio > audio The audio file that generates players. AudioPlayerManager.AudioState playerState Filters BackgroundAudio.Player s based on state. List < BackgroundAudio.Player > returnPlayers The list to append BackgroundAudio.Player s to. Effectively the return variable. Exceptions Type Condition ArgumentNullException If audio 's state is Null . IsPlayerMatchingState(BackgroundAudio.Player, AudioPlayerManager.AudioState) Checks if an BackgroundAudio.Player is at a state that matches any of the flags in state . Declaration public static bool IsPlayerMatchingState(BackgroundAudio.Player player, AudioPlayerManager.AudioState state) Parameters Type Name Description BackgroundAudio.Player player The player to check the state. AudioPlayerManager.AudioState state Flags to compare the state of the player . Returns Type Description Boolean true if the is in a state that matches any one of flags in state . Exceptions Type Condition ArgumentNullException If player is null ."
  },
  "api/OmiyaGames.Audio.AudioSettings.html": {
    "href": "api/OmiyaGames.Audio.AudioSettings.html",
    "title": "Class AudioSettings | Omiya Games - Audio documentation",
    "keywords": "Class AudioSettings Scriptable object with settings info. Inheritance Object AudioSettings Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class AudioSettings : BaseSettingsData Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp.1 Date: 2/13/2022 Author: Taro Omiya Initial draft. Version: 1.0.0 Date: 6/21/2022 Author: Taro Omiya Adding documentation. Fields DATA_DIRECTORY Declaration public const string DATA_DIRECTORY = \"Packages/com.omiyagames.audio/Runtime/Data/\" Field Value Type Description String Properties Ambience The background ambience layer. Allows playing and managing BackgroundAudio clips. Declaration public AudioLayer.Background Ambience { get; } Property Value Type Description AudioLayer.Background CurrentVersion Declaration public override int CurrentVersion { get; } Property Value Type Description Int32 Main The main layer of audio. This affects the volume and pitch of all audio sources wired to any layer in this manager. Declaration public AudioLayer Main { get; } Property Value Type Description AudioLayer Mixer The main mixer of this game. Declaration public AudioMixer Mixer { get; } Property Value Type Description AudioMixer Music The background music layer. Allows playing and managing BackgroundAudio clips. Declaration public AudioLayer.Background Music { get; } Property Value Type Description AudioLayer.Background MuteVolumeDb The volume in which Mixer interprets as mute. Declaration public float MuteVolumeDb { get; } Property Value Type Description Single PercentToDbCurve The curve used to convert a fraction between 0 and 1 to decibels. Used to make it easier to set the mixer volume. Declaration public AnimationCurve PercentToDbCurve { get; } Property Value Type Description AnimationCurve SoundEffects The layer dedicated to sound effects. This affects the volume and pitch of any audio sources wired to DefaultUiGroup or DefaultGroup . Declaration public AudioLayer.Spatial SoundEffects { get; } Property Value Type Description AudioLayer.Spatial TimeScaleSnapshots Settings to map to pitch range and other distortion effects. Declaration public TimeScaleAudioModifiers[] TimeScaleSnapshots { get; } Property Value Type Description TimeScaleAudioModifiers [] Voices The layer dedicated to voices. This affects the volume and pitch of any audio sources wired to DefaultUiGroup or DefaultGroup . Declaration public AudioLayer.Spatial Voices { get; } Property Value Type Description AudioLayer.Spatial Methods DefaultPercentToVolumeDbConversion(Single) The default percent to decibels converter, assuming mute-decibel is -80 dB. Declaration public static float DefaultPercentToVolumeDbConversion(float percent) Parameters Type Name Description Single percent Value from 0 to 1. Returns Type Description Single Volume, in decibels, where -80 dB is mute. OnUpgrade(Int32, out String) Declaration protected override bool OnUpgrade(int oldVersion, out string errorMessage) Parameters Type Name Description Int32 oldVersion String errorMessage Returns Type Description Boolean"
  },
  "api/OmiyaGames.Audio.BackgroundAudio.html": {
    "href": "api/OmiyaGames.Audio.BackgroundAudio.html",
    "title": "Class BackgroundAudio | Omiya Games - Audio documentation",
    "keywords": "Class BackgroundAudio An interface for music, used to generate playing a clip. Inheritance Object BackgroundAudio SingleLoopingMusic Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public abstract class BackgroundAudio : ScriptableObject Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 4/12/2022 Author: Taro Omiya Initial verison. Version: 1.1.0 Date: 6/30/2022 Author: Taro Omiya Adding new property, IsPausedOnTimeStop . Fields MENU_ORDER Declaration public const int MENU_ORDER = 210 Field Value Type Description Int32 Properties MainAudioSourcePrefab A prefab reference to use as basis for constructing a new BackgroundAudio.Player . Declaration public AudioSource MainAudioSourcePrefab { get; } Property Value Type Description AudioSource Methods GeneratePlayer(GameObject) Sets up attach with s and other items to play the music. Declaration public abstract BackgroundAudio.Player GeneratePlayer(GameObject attach) Parameters Type Name Description GameObject attach The script generated s will be attached or be child of. Returns Type Description BackgroundAudio.Player Reset() Resets this file. Primarily used in the Unity Inspector. Declaration public virtual void Reset()"
  },
  "api/OmiyaGames.Audio.BackgroundAudio.Player.html": {
    "href": "api/OmiyaGames.Audio.BackgroundAudio.Player.html",
    "title": "Class BackgroundAudio.Player | Omiya Games - Audio documentation",
    "keywords": "Class BackgroundAudio.Player The that plays a BackgroundAudio . Inheritance Object BackgroundAudio.Player Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public abstract class Player : MonoBehaviour Properties Data The BackgroundAudio that generated this instance. Also holds the s that this instance plays. Declaration public abstract BackgroundAudio Data { get; } Property Value Type Description BackgroundAudio IsPausedOnTimeStop Gets or sets whether this player should pause when is zero. Declaration public abstract bool IsPausedOnTimeStop { get; set; } Property Value Type Description Boolean MixerGroup Sets the mixer group this player streams its audio through. Declaration public abstract AudioMixerGroup MixerGroup { set; } Property Value Type Description AudioMixerGroup Remarks Primarily used by MixerGroupManager to handle fade-ins and fade-outs. State Gets the state of this player. Declaration public abstract BackgroundAudio.PlayState State { get; } Property Value Type Description BackgroundAudio.PlayState Methods OnDestroy() Declaration protected virtual void OnDestroy() Play(PlaybackArgs) Plays the audio from Data . Declaration public abstract void Play(PlaybackArgs args) Parameters Type Name Description PlaybackArgs args Adds additional configuration details, such as delaying when the player starts playing. This argument can be null, in which case the player starts immediately. Remarks If State is already set to Playing , this method does nothing. Stop() Stops playing the audio. Declaration public abstract void Stop() Remarks If State is already set to Stopped , this method does nothing. Events OnAfterChangeState Event that triggers after State changes. Declaration public abstract event ITrackable<BackgroundAudio.PlayState>.ChangeEvent OnAfterChangeState Event Type Type Description ITrackable.ChangeEvent <> OnBeforeChangeState Event that triggers before State changes. Declaration public abstract event ITrackable<BackgroundAudio.PlayState>.ChangeEvent OnBeforeChangeState Event Type Type Description ITrackable.ChangeEvent <> OnBeforeDestroy Event that triggers when this script is destroyed. Declaration public event Action<BackgroundAudio.Player> OnBeforeDestroy Event Type Type Description Action < BackgroundAudio.Player >"
  },
  "api/OmiyaGames.Audio.BackgroundAudio.PlayState.html": {
    "href": "api/OmiyaGames.Audio.BackgroundAudio.PlayState.html",
    "title": "Enum BackgroundAudio.PlayState | Omiya Games - Audio documentation",
    "keywords": "Enum BackgroundAudio.PlayState The state of BackgroundAudio.Player . Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public enum PlayState Fields Name Description Playing Music is playing. Scheduled Music is scheduled to start playing, but haven't, yet. Stopped Music has been stopped."
  },
  "api/OmiyaGames.Audio.ChangeAudioOnStart.Behavior.html": {
    "href": "api/OmiyaGames.Audio.ChangeAudioOnStart.Behavior.html",
    "title": "Enum ChangeAudioOnStart.Behavior | Omiya Games - Audio documentation",
    "keywords": "Enum ChangeAudioOnStart.Behavior The behavior at the end of ChangeAudioOnStart . Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public enum Behavior Fields Name Description ClearHistory Clears AudioHistory . StopPriorAudio Just stop playing the audio that was playing prior to this."
  },
  "api/OmiyaGames.Audio.ChangeAudioOnStart.html": {
    "href": "api/OmiyaGames.Audio.ChangeAudioOnStart.html",
    "title": "Class ChangeAudioOnStart | Omiya Games - Audio documentation",
    "keywords": "Class ChangeAudioOnStart Changes the background music on scene start. Inheritance Object ChangeAudioOnStart Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class ChangeAudioOnStart : MonoBehaviour Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 4/14/2022 Author: Taro Omiya Initial verison. Methods Start() Sets up the AudioManager to play BackgroundAudio s for both music and ambience to whatever is set in the Unity inspector. Declaration public virtual IEnumerator Start() Returns Type Description IEnumerator The coroutine for loading everything. Events OnAfterAudioChange Declaration public event Action<ChangeAudioOnStart> OnAfterAudioChange Event Type Type Description Action < ChangeAudioOnStart > OnBeforeAudioChange Declaration public event Action<ChangeAudioOnStart> OnBeforeAudioChange Event Type Type Description Action < ChangeAudioOnStart >"
  },
  "api/OmiyaGames.Audio.ChangeAudioOnTrigger.html": {
    "href": "api/OmiyaGames.Audio.ChangeAudioOnTrigger.html",
    "title": "Class ChangeAudioOnTrigger | Omiya Games - Audio documentation",
    "keywords": "Class ChangeAudioOnTrigger Changes the background music on collision trigger enter. Inheritance Object ChangeAudioOnTrigger Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class ChangeAudioOnTrigger : MonoBehaviour Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 4/14/2022 Author: Taro Omiya Initial verison. Events OnAfterAudioChange Declaration public event Action<ChangeAudioOnStart> OnAfterAudioChange Event Type Type Description Action < ChangeAudioOnStart > OnBeforeAudioChange Declaration public event Action<ChangeAudioOnStart> OnBeforeAudioChange Event Type Type Description Action < ChangeAudioOnStart >"
  },
  "api/OmiyaGames.Audio.Editor.AssetRefSerializedDrawer.html": {
    "href": "api/OmiyaGames.Audio.Editor.AssetRefSerializedDrawer.html",
    "title": "Class AssetRefSerializedDrawer | Omiya Games - Audio documentation",
    "keywords": "Class AssetRefSerializedDrawer An editor to make it easier to edit fields. Inheritance Object AssetRefSerializedDrawer Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class AssetRefSerializedDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 6/18/2022 Author: Taro Omiya Initial version. Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Audio.Editor.AudioMenuItems.html": {
    "href": "api/OmiyaGames.Audio.Editor.AudioMenuItems.html",
    "title": "Class AudioMenuItems | Omiya Games - Audio documentation",
    "keywords": "Class AudioMenuItems Add menu items for creating audio scripts into the game. Inheritance Object AudioMenuItems Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class AudioMenuItems : MonoBehaviour Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp.1 Date: 3/7/2022 Author: Taro Omiya Initial draft."
  },
  "api/OmiyaGames.Audio.Editor.AudioSettingsBuilder.html": {
    "href": "api/OmiyaGames.Audio.Editor.AudioSettingsBuilder.html",
    "title": "Class AudioSettingsBuilder | Omiya Games - Audio documentation",
    "keywords": "Class AudioSettingsBuilder Pre- and post-build script to add an instance of AudioSettings into the pre-loaded assets (and thus, build.) Inheritance Object AudioSettingsBuilder Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class AudioSettingsBuilder : BaseSettingsBuilder<AudioSettings> Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp.1 Date: 2/16/2022 Author: Taro Omiya Initial verison. Properties ConfigName Declaration public override string ConfigName { get; } Property Value Type Description String"
  },
  "api/OmiyaGames.Audio.Editor.AudioSettingsEditor.html": {
    "href": "api/OmiyaGames.Audio.Editor.AudioSettingsEditor.html",
    "title": "Class AudioSettingsEditor | Omiya Games - Audio documentation",
    "keywords": "Class AudioSettingsEditor Editor for AudioSettings . Appears under inspector when selecting the asset. Inheritance Object AudioSettingsEditor Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class AudioSettingsEditor : SettingsEditor Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp.1 Date: 2/16/2022 Author: Taro Omiya Initial version Properties SidebarDisplayPath Declaration public override string SidebarDisplayPath { get; } Property Value Type Description String UxmlPath Declaration public override string UxmlPath { get; } Property Value Type Description String"
  },
  "api/OmiyaGames.Audio.Editor.AudioSettingsProvider.html": {
    "href": "api/OmiyaGames.Audio.Editor.AudioSettingsProvider.html",
    "title": "Class AudioSettingsProvider | Omiya Games - Audio documentation",
    "keywords": "Class AudioSettingsProvider Editor for AudioSettings . Appears under the Project Settings window. Inheritance Object AudioSettingsProvider Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class AudioSettingsProvider : BaseSettingsEditor<AudioSettings> Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp.1 Date: 2/16/2022 Author: Taro Omiya Initial verison. Constructors AudioSettingsProvider(String, IEnumerable<String>) Constructs a project-scoped . Declaration public AudioSettingsProvider(string path, IEnumerable<string> keywords) Parameters Type Name Description String path IEnumerable < String > keywords Properties AddressableGroupName Declaration public override string AddressableGroupName { get; } Property Value Type Description String AddressableName Declaration public override string AddressableName { get; } Property Value Type Description String ConfigName Declaration public override string ConfigName { get; } Property Value Type Description String DefaultSettingsFileName Declaration public override string DefaultSettingsFileName { get; } Property Value Type Description String HeaderText Declaration public override string HeaderText { get; } Property Value Type Description String HelpUrl Declaration public override string HelpUrl { get; } Property Value Type Description String UxmlPath Declaration public override string UxmlPath { get; } Property Value Type Description String Methods CreateSettingsProvider() Registers this . Declaration public static SettingsProvider CreateSettingsProvider() Returns Type Description SettingsProvider CustomizeEditSettingsTree(VisualElement, SerializedObject) Declaration protected override VisualElement CustomizeEditSettingsTree(VisualElement returnTree, SerializedObject serializedSettings) Parameters Type Name Description VisualElement returnTree SerializedObject serializedSettings Returns Type Description VisualElement"
  },
  "api/OmiyaGames.Audio.Editor.BackgroundAudioPreview.html": {
    "href": "api/OmiyaGames.Audio.Editor.BackgroundAudioPreview.html",
    "title": "Class BackgroundAudioPreview | Omiya Games - Audio documentation",
    "keywords": "Class BackgroundAudioPreview Helper class to create an audio preview of a player. Inheritance Object BackgroundAudioPreview Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class BackgroundAudioPreview : IDisposable Remarks The MIT License (MIT) Copyright (c) 2014-2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 6/19/2022 Author: Taro Omiya Initial version. Properties IsPlaying Indicates if the preview is playing. Declaration public bool IsPlaying { get; } Property Value Type Description Boolean PlayStartTime The this preview started playing Declaration public double PlayStartTime { get; } Property Value Type Description Double Methods Dispose() Stops and disposes this preview player from the currently-opened Unity scene. Declaration public void Dispose() Remarks Does nothing if IsPlaying is false . Play(BackgroundAudio) Creates and starts playing an invisible BackgroundAudio.Player in the currently-opened Unity scene. Declaration public void Play(BackgroundAudio audioFile) Parameters Type Name Description BackgroundAudio audioFile Remarks Does nothing if IsPlaying is true . See Also SingleLoopingMusic"
  },
  "api/OmiyaGames.Audio.Editor.FadeLayerDrawer.html": {
    "href": "api/OmiyaGames.Audio.Editor.FadeLayerDrawer.html",
    "title": "Class FadeLayerDrawer | Omiya Games - Audio documentation",
    "keywords": "Class FadeLayerDrawer An editor to make it easier to edit scripts. Inheritance Object FadeLayerDrawer Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class FadeLayerDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 4/17/2022 Author: Taro Omiya Initial version. Methods CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement"
  },
  "api/OmiyaGames.Audio.Editor.html": {
    "href": "api/OmiyaGames.Audio.Editor.html",
    "title": "Namespace OmiyaGames.Audio.Editor | Omiya Games - Audio documentation",
    "keywords": "Namespace OmiyaGames.Audio.Editor Classes AssetRefSerializedDrawer An editor to make it easier to edit fields. AudioMenuItems Add menu items for creating audio scripts into the game. AudioSettingsBuilder Pre- and post-build script to add an instance of AudioSettings into the pre-loaded assets (and thus, build.) AudioSettingsEditor Editor for AudioSettings . Appears under inspector when selecting the asset. AudioSettingsProvider Editor for AudioSettings . Appears under the Project Settings window. BackgroundAudioPreview Helper class to create an audio preview of a player. FadeLayerDrawer An editor to make it easier to edit scripts. PlaybackBehaviorDrawer An editor to make it easier to edit PlaybackBehavior fields. SingleLoopingMusicEditor An editor to make it easier to edit SingleLoopingMusic scripts. SoundEffectEditor TimeScaleAudioModifiersDrawer An editor to make it easier to edit TimeScaleAudioModifiers scripts."
  },
  "api/OmiyaGames.Audio.Editor.PlaybackBehaviorDrawer.html": {
    "href": "api/OmiyaGames.Audio.Editor.PlaybackBehaviorDrawer.html",
    "title": "Class PlaybackBehaviorDrawer | Omiya Games - Audio documentation",
    "keywords": "Class PlaybackBehaviorDrawer An editor to make it easier to edit PlaybackBehavior fields. Inheritance Object PlaybackBehaviorDrawer Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class PlaybackBehaviorDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 6/23/2022 Author: Taro Omiya Initial version. Version: 1.1.0 Date: 6/30/2022 Author: Taro Omiya Supporting drawing new checkbox, IsPausedOnTimeStop . Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Audio.Editor.SingleLoopingMusicEditor.html": {
    "href": "api/OmiyaGames.Audio.Editor.SingleLoopingMusicEditor.html",
    "title": "Class SingleLoopingMusicEditor | Omiya Games - Audio documentation",
    "keywords": "Class SingleLoopingMusicEditor An editor to make it easier to edit SingleLoopingMusic scripts. Inheritance Object SingleLoopingMusicEditor Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class SingleLoopingMusicEditor : UnityEditor.Editor Remarks The MIT License (MIT) Copyright (c) 2014-2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 6/19/2022 Author: Taro Omiya Initial version. Methods CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement See Also SingleLoopingMusic"
  },
  "api/OmiyaGames.Audio.Editor.SoundEffectEditor.html": {
    "href": "api/OmiyaGames.Audio.Editor.SoundEffectEditor.html",
    "title": "Class SoundEffectEditor | Omiya Games - Audio documentation",
    "keywords": "Class SoundEffectEditor Inheritance Object SoundEffectEditor Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class SoundEffectEditor : UnityEditor.Editor Methods CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description VisualElement"
  },
  "api/OmiyaGames.Audio.Editor.TimeScaleAudioModifiersDrawer.html": {
    "href": "api/OmiyaGames.Audio.Editor.TimeScaleAudioModifiersDrawer.html",
    "title": "Class TimeScaleAudioModifiersDrawer | Omiya Games - Audio documentation",
    "keywords": "Class TimeScaleAudioModifiersDrawer An editor to make it easier to edit TimeScaleAudioModifiers scripts. Inheritance Object TimeScaleAudioModifiersDrawer Namespace : OmiyaGames.Audio.Editor Assembly : cs.temp.dll.dll Syntax public class TimeScaleAudioModifiersDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp.1 Date: 3/14/2022 Author: Taro Omiya Initial version. Methods CreatePropertyGUI(SerializedProperty) Declaration public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description VisualElement See Also TimeScaleAudioModifiers"
  },
  "api/OmiyaGames.Audio.FadeInArgs.html": {
    "href": "api/OmiyaGames.Audio.FadeInArgs.html",
    "title": "Class FadeInArgs | Omiya Games - Audio documentation",
    "keywords": "Class FadeInArgs Provides configuration details to MixerGroupManager on how to fade in a BackgroundAudio . Inheritance Object PlaybackArgs FadeInArgs Inherited Members PlaybackArgs.DelaySeconds PlaybackArgs.SkipForwardToSeconds PlaybackArgs.IsPausedOnTimeStop Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class FadeInArgs : PlaybackArgs Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 4/18/2022 Author: Taro Omiya Initial draft. Properties DurationSeconds Duration of fade-in when it begins, in seconds, normalized by DSP scale. Declaration public double DurationSeconds { get; set; } Property Value Type Description Double ForceRestart If checked, restart playing this music, even if it's already playing in the background, or in the process of fading out. Declaration public bool ForceRestart { get; set; } Property Value Type Description Boolean Methods FixData() Fixes any invalid property values. Declaration public override void FixData() Overrides PlaybackArgs.FixData()"
  },
  "api/OmiyaGames.Audio.FadeOutArgs.html": {
    "href": "api/OmiyaGames.Audio.FadeOutArgs.html",
    "title": "Class FadeOutArgs | Omiya Games - Audio documentation",
    "keywords": "Class FadeOutArgs Provides configuration details to MixerGroupManager on how to fade out a BackgroundAudio . Inheritance Object FadeOutArgs Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class FadeOutArgs : EventArgs Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 4/18/2022 Author: Taro Omiya Initial draft. Properties DelaySeconds Delay fade-out effect in seconds, normalized by DSP scale. Declaration public double DelaySeconds { get; set; } Property Value Type Description Double DurationSeconds Duration of fade-out when it begins, in seconds, normalized by DSP scale. Declaration public double DurationSeconds { get; set; } Property Value Type Description Double Methods FixData() Fixes any invalid property values. Declaration public void FixData()"
  },
  "api/OmiyaGames.Audio.html": {
    "href": "api/OmiyaGames.Audio.html",
    "title": "Namespace OmiyaGames.Audio | Omiya Games - Audio documentation",
    "keywords": "Namespace OmiyaGames.Audio Classes AssetRef Contains helper enums for AssetRef<TObject> . AssetRefSerialized<TObject> Helper serialized class to display in Unity inspector. Generates an AssetRef<TObject> . AudioHistory Retains a history of BackgroundAudio , capped by MaxCapacity . AudioHistory.AddArgs The event argument when calling Add(in AssetRef<BackgroundAudio>) . AudioHistory.RemoveArgs The event argument when calling RemoveOldest() or RemoveNewest() . AudioLayer Base info on each audio category. AudioLayer.Background Audio category applicable to ones predominately used in the background, i.e. music and ambience. AudioLayer.PlayerArgs Event arguments for fading in a BackgroundAudio.Player AudioLayer.Spatial Audio category applicable to ones predominately used in spatial context, i.e. sound effects and voices. AudioLayer.SubLayer A sublayer to AudioLayer AudioManager A manager file that allows adjusting an from settings. AudioPlayerManager Handles managing BackgroundAudio.Player s, including generating and auto-removing unused players. Generally used like a , where BackgroundAudio is mapped to a list of BackgroundAudio.Player s. AudioSettings Scriptable object with settings info. BackgroundAudio An interface for music, used to generate playing a clip. BackgroundAudio.Player The that plays a BackgroundAudio . ChangeAudioOnStart Changes the background music on scene start. ChangeAudioOnTrigger Changes the background music on collision trigger enter. FadeInArgs Provides configuration details to MixerGroupManager on how to fade in a BackgroundAudio . FadeOutArgs Provides configuration details to MixerGroupManager on how to fade out a BackgroundAudio . MixerGroupFader Unity inspector class for pairing a with a parameter name for changing its volume. MixerGroupManager Manager for , used to fade in and out various BackgroundAudio.Player s. PlaybackArgs Provides configuration details to BackgroundAudio.Player on how to play a BackgroundAudio . PlaybackBehavior Helper serialized class to display in Unity inspector. Generates details for fade-ins and fade-outs. SingleLoopingMusic A BackgroundAudio representing a looping music and optionally an intro stinger. SoundEffect A script for playing sound effects, with extra options such as clip, pitch, and volume mutation. Also allows configuring sound effects' volume. TimeScaleAudioModifiers Helper struct for params in AudioSettings . Structs AssetRef<TObject> A common wrapper to an asset. Use this to represent Assets that could either be a direct reference to a project asset, or an addressable reference. Enums AssetRef.State Provides the state of AssetRef<TObject> , and whether it's referencing a project asset or addressable asset. AudioLayer.PlayerArgs.PlayerState Indicates how the BackgroundAudio.Player was selected. AudioPlayerManager.AudioState An equivalent of BackgroundAudio.PlayState , where multiple values can be combined like a flag. BackgroundAudio.PlayState The state of BackgroundAudio.Player . ChangeAudioOnStart.Behavior The behavior at the end of ChangeAudioOnStart . PlaybackBehavior.FadeBehavior The action to take. SoundEffect.Layer Delegates AudioHistory.OnAdd Standard format for events called by Add(in AssetRef<BackgroundAudio>) . AudioHistory.OnRemove Standard format for events called by RemoveOldest() and RemoveNewest() . AudioLayer.Background.OnCoroutineFinished Called at the end of s called by AudioLayer.Background ."
  },
  "api/OmiyaGames.Audio.MixerGroupFader.html": {
    "href": "api/OmiyaGames.Audio.MixerGroupFader.html",
    "title": "Class MixerGroupFader | Omiya Games - Audio documentation",
    "keywords": "Class MixerGroupFader Unity inspector class for pairing a with a parameter name for changing its volume. Inheritance Object MixerGroupFader Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class MixerGroupFader Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 6/26/2022 Author: Taro Omiya Initial draft. Properties Group Gets this layer's . Declaration public AudioMixerGroup Group { get; } Property Value Type Description AudioMixerGroup ParamName Gets the Group 's parameter name to adjust its volume. Declaration public string ParamName { get; } Property Value Type Description String Player The audio player currently playing on Group . Declaration public BackgroundAudio.Player Player { get; set; } Property Value Type Description BackgroundAudio.Player VolumePercent Sets the volume of Group . Declaration public float VolumePercent { get; set; } Property Value Type Description Single Methods GetFadeProgressionPercent() Calculates how far StartFadingVolume(Double, Double, Single, Action<MixerGroupFader>) progressed. Declaration public float GetFadeProgressionPercent() Returns Type Description Single The progress the fading coroutine hase made, as a percentage between 0 and 1 . Setup(MonoBehaviour, AnimationCurve) Setup the member variables of this layer Declaration public void Setup(MonoBehaviour coroutineRunner, AnimationCurve percentToDbCurve) Parameters Type Name Description MonoBehaviour coroutineRunner The script to run coroutines like StartFadingVolume(Double, Double, Single, Action<MixerGroupFader>) . AnimationCurve percentToDbCurve The curve used to convert a fraction from 0 to 1 to decibels. StartFadingVolume(Double, Double, Single, Action<MixerGroupFader>) Start the volume fading coroutine. Declaration public void StartFadingVolume(double startTime, double durationSeconds, float finalVolumePercent, Action<MixerGroupFader> afterFadeFinished = null) Parameters Type Name Description Double startTime The fading will start playing. Double durationSeconds The duration the fade will last, in seconds, normalised by . Single finalVolumePercent The volume to fade to. Action < MixerGroupFader > afterFadeFinished Invoked at the end of the . Argument is set to the source of this fade routine. StopFadingVolume() Stops the volume fading coroutine. Declaration public void StopFadingVolume()"
  },
  "api/OmiyaGames.Audio.MixerGroupManager.html": {
    "href": "api/OmiyaGames.Audio.MixerGroupManager.html",
    "title": "Class MixerGroupManager | Omiya Games - Audio documentation",
    "keywords": "Class MixerGroupManager Manager for , used to fade in and out various BackgroundAudio.Player s. Inheritance Object MixerGroupManager Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class MixerGroupManager Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 5/23/2022 Author: Taro Omiya Initial draft. Constructors MixerGroupManager(AudioPlayerManager, AnimationCurve, MixerGroupFader[]) Constructs a new manager. Declaration public MixerGroupManager(AudioPlayerManager manager, AnimationCurve percentToDbCurve, MixerGroupFader[] fadeLayers) Parameters Type Name Description AudioPlayerManager manager The manager for BackgroundAudio.Player s. AnimationCurve percentToDbCurve Curve used to convert a fraction from 0 to 1 to decibels. MixerGroupFader [] fadeLayers Pairs of and parameter name for the group's volume. Methods FadeIn(BackgroundAudio.Player, FadeInArgs) Starts playing the player , and fading it in to full volume. Declaration public bool FadeIn(BackgroundAudio.Player player, FadeInArgs args) Parameters Type Name Description BackgroundAudio.Player player The BackgroundAudio.Player to start playing, and/or fading in. FadeInArgs args Details on how to fade, e.g. how long it should last, etc. Returns Type Description Boolean true if fading has been performed; false otherwise. FadeOut(BackgroundAudio.Player, FadeOutArgs) Fades out a player , and optinally stop playing once it's silent. Declaration public bool FadeOut(BackgroundAudio.Player player, FadeOutArgs args) Parameters Type Name Description BackgroundAudio.Player player The BackgroundAudio.Player to fade out, and/or stop. FadeOutArgs args Details on how to fade out, e.g. how long it should last, etc. Returns Type Description Boolean true if fading has been performed; false otherwise. FadeTo(BackgroundAudio.Player, FadeInArgs, Single) Starts playing the player , and fading it in to the specified volume. Declaration public bool FadeTo(BackgroundAudio.Player player, FadeInArgs args, float finalVolumePercent) Parameters Type Name Description BackgroundAudio.Player player The BackgroundAudio.Player to start playing, and/or fading in. FadeInArgs args Details on how to fade, e.g. how long it should last, etc. Single finalVolumePercent The final volume at the end of the fade, as a fraction between 0 and 1 . Returns Type Description Boolean true if fading has been performed; false otherwise. GetManagedPlayers() Gets a list of BackgroundAudio.Player s that's playing on a managed by this manager. Declaration public BackgroundAudio.Player[] GetManagedPlayers() Returns Type Description BackgroundAudio.Player [] The list of BackgroundAudio.Player s managed by this instance. GetMixerGroup(Int32) Gets the at a specified index. Declaration public AudioMixerGroup GetMixerGroup(int layerIndex) Parameters Type Name Description Int32 layerIndex Index corresponding to the list in Unity Project Settings dialog (starting at 0 .) Returns Type Description AudioMixerGroup The corresponding . GetVolume(Int32) Gets the volume for a . Declaration public float GetVolume(int layerIndex) Parameters Type Name Description Int32 layerIndex Index corresponding to the list in Unity Project Settings dialog (starting at 0 .) Returns Type Description Single The volume, as a fraction between 0 and 1 . SetVolume(Int32, Single) Sets the volume for a . Declaration public void SetVolume(int layerIndex, float volumePercent) Parameters Type Name Description Int32 layerIndex Index corresponding to the list in Unity Project Settings dialog (starting at 0 .) Single volumePercent The volume, as a fraction between 0 and 1 ."
  },
  "api/OmiyaGames.Audio.PlaybackArgs.html": {
    "href": "api/OmiyaGames.Audio.PlaybackArgs.html",
    "title": "Class PlaybackArgs | Omiya Games - Audio documentation",
    "keywords": "Class PlaybackArgs Provides configuration details to BackgroundAudio.Player on how to play a BackgroundAudio . Inheritance Object PlaybackArgs FadeInArgs Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class PlaybackArgs : EventArgs Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 4/18/2022 Author: Taro Omiya Initial draft. Version: 1.1.0 Date: 6/30/2022 Author: Taro Omiya Adding new property, IsPausedOnTimeStop . Properties DelaySeconds How long to delay playback (in seconds, normalized by .) Declaration public double DelaySeconds { get; set; } Property Value Type Description Double IsPausedOnTimeStop If true , the BackgroundAudio.Player will pause when is set to zero. Declaration public bool IsPausedOnTimeStop { get; set; } Property Value Type Description Boolean SkipForwardToSeconds Allows playing from the middle of an audio clip by skipping forward in time by X seconds, normalized by . Declaration public double SkipForwardToSeconds { get; set; } Property Value Type Description Double Methods FixData() Fixes any invalid property values. Declaration public virtual void FixData()"
  },
  "api/OmiyaGames.Audio.PlaybackBehavior.FadeBehavior.html": {
    "href": "api/OmiyaGames.Audio.PlaybackBehavior.FadeBehavior.html",
    "title": "Enum PlaybackBehavior.FadeBehavior | Omiya Games - Audio documentation",
    "keywords": "Enum PlaybackBehavior.FadeBehavior The action to take. Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public enum FadeBehavior Fields Name Description DoNothing Do nothing; let's the last audio continue to play. FadeInNewAudio Fade out the last playing audio, and fade in AudioFile . FadeToSilence Fade out the last playing audio into silence."
  },
  "api/OmiyaGames.Audio.PlaybackBehavior.html": {
    "href": "api/OmiyaGames.Audio.PlaybackBehavior.html",
    "title": "Class PlaybackBehavior | Omiya Games - Audio documentation",
    "keywords": "Class PlaybackBehavior Helper serialized class to display in Unity inspector. Generates details for fade-ins and fade-outs. Inheritance Object PlaybackBehavior Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax [Serializable] public class PlaybackBehavior Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 6/23/2022 Author: Taro Omiya Initial draft. Version: 1.1.0 Date: 6/30/2022 Author: Taro Omiya Adding new property, IsPausedOnTimeStop . Constructors PlaybackBehavior(PlaybackBehavior.FadeBehavior, Double, Boolean, Boolean) Constructs a new instance with default arguments. Declaration public PlaybackBehavior(PlaybackBehavior.FadeBehavior behavior = PlaybackBehavior.FadeBehavior.DoNothing, double fadeDurationSeconds = 0.5, bool alwaysRestart = false, bool isPausedOnTimeStop = false) Parameters Type Name Description PlaybackBehavior.FadeBehavior behavior Sets default Behavior . Double fadeDurationSeconds Sets default FadeDurationSeconds . Boolean alwaysRestart Sets default AlwaysRestart . Boolean isPausedOnTimeStop Sets default IsPausedOnTimeStop . Fields DEFAULT_FADE_DURATION Declaration public const float DEFAULT_FADE_DURATION = 0.5F Field Value Type Description Single Properties AlwaysRestart If true , restarts playing AudioFile even if it's already playing in the background. Declaration public bool AlwaysRestart { get; } Property Value Type Description Boolean Remarks This property is set in the Unity Inspector. AudioFile Gets the audio to fade in. Declaration public AssetRefSerialized<BackgroundAudio> AudioFile { get; } Property Value Type Description AssetRefSerialized < BackgroundAudio > Remarks This property is set in the Unity Inspector. Behavior Gets the action to take. Declaration public PlaybackBehavior.FadeBehavior Behavior { get; } Property Value Type Description PlaybackBehavior.FadeBehavior Remarks This property is set in the Unity Inspector. FadeDurationSeconds Gets how long to perform the fade-in or fade-out, in seconds. Normalized by . Declaration public double FadeDurationSeconds { get; } Property Value Type Description Double Remarks This property is set in the Unity Inspector. IsPausedOnTimeStop If true , pauses the AudioFile when is set to zero. Declaration public bool IsPausedOnTimeStop { get; } Property Value Type Description Boolean Remarks This property is set in the Unity Inspector. Methods GetFadeInArgs() Generates a fade-in arguments based on this instance's properties. Declaration public FadeInArgs GetFadeInArgs() Returns Type Description FadeInArgs The fade-in arguments using FadeDurationSeconds and AlwaysRestart . GetFadeOutArgs() Generates a fade-out arguments based on this instance's properties. Declaration public FadeOutArgs GetFadeOutArgs() Returns Type Description FadeOutArgs The fade-in arguments using FadeDurationSeconds . StartCoroutine(MonoBehaviour, AudioLayer.Background, AudioLayer.Background.OnCoroutineFinished) Starts the for this behavior. Declaration public Coroutine StartCoroutine(MonoBehaviour script, AudioLayer.Background audioLayer, AudioLayer.Background.OnCoroutineFinished onFinish = null) Parameters Type Name Description MonoBehaviour script The script to run this on. AudioLayer.Background audioLayer AudioLayer.Background.OnCoroutineFinished onFinish Invoked at the end of the . Returns Type Description Coroutine The running this behavior."
  },
  "api/OmiyaGames.Audio.SingleLoopingMusic.html": {
    "href": "api/OmiyaGames.Audio.SingleLoopingMusic.html",
    "title": "Class SingleLoopingMusic | Omiya Games - Audio documentation",
    "keywords": "Class SingleLoopingMusic A BackgroundAudio representing a looping music and optionally an intro stinger. Inheritance Object BackgroundAudio SingleLoopingMusic Inherited Members BackgroundAudio.MENU_ORDER BackgroundAudio.MainAudioSourcePrefab Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class SingleLoopingMusic : BackgroundAudio Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.0.0 Date: 4/16/2022 Author: Taro Omiya Initial verison. Version: 1.1.0 Date: 6/30/2022 Author: Taro Omiya Adding new property, OmiyaGames.Audio.SingleLoopingMusic.SingleLoopingMusicPlayer.IsPausedOnTimeStop . Properties IntroSting Gets the clip that plays once before Loop . Declaration public AudioClip IntroSting { get; } Property Value Type Description AudioClip Remarks This variable is set in the Unity Inspector. Loop Gets the clip that loops until Stop() . Declaration public AudioClip Loop { get; } Property Value Type Description AudioClip Remarks This variable is set in the Unity Inspector. PlayLoopAfterSeconds Gets how many seconds playing Loop will be delayed if IntroSting is not null . Declaration public double PlayLoopAfterSeconds { get; } Property Value Type Description Double Remarks This variable is set in the Unity Inspector. Methods GeneratePlayer(GameObject) Sets up attach with s and other items to play the music. Declaration public override BackgroundAudio.Player GeneratePlayer(GameObject attach) Parameters Type Name Description GameObject attach The script generated s will be attached or be child of. Returns Type Description BackgroundAudio.Player Overrides BackgroundAudio.GeneratePlayer(GameObject) Reset() Resets this file. Primarily used in the Unity Inspector. Declaration public override void Reset() Overrides BackgroundAudio.Reset() SetLoopDelayToIntroStingDuration() Calculates how long IntroSting is, and sets PlayLoopAfterSeconds . This produces a more accurate value than . Declaration public void SetLoopDelayToIntroStingDuration()"
  },
  "api/OmiyaGames.Audio.SoundEffect.html": {
    "href": "api/OmiyaGames.Audio.SoundEffect.html",
    "title": "Class SoundEffect | Omiya Games - Audio documentation",
    "keywords": "Class SoundEffect A script for playing sound effects, with extra options such as clip, pitch, and volume mutation. Also allows configuring sound effects' volume. Inheritance Object SoundEffect Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public class SoundEffect : MonoBehaviour Remarks The MIT License (MIT) Copyright (c) 2014-2018 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 8/18/2015 Author: Taro Omiya Version: 0.1.0-exp.1 Date: 2/18/2022 Author: Taro Omiya Initial verison. Moved to new package. Fields MAX_LAYERS Declaration public const int MAX_LAYERS = 10 Field Value Type Description Int32 MAX_PITCH Declaration public const float MAX_PITCH = 3F Field Value Type Description Single MAX_VOLUME Declaration public const float MAX_VOLUME = 1F Field Value Type Description Single MIN_LAYERS Declaration public const int MIN_LAYERS = 1 Field Value Type Description Int32 MIN_PITCH Declaration public const float MIN_PITCH = -3F Field Value Type Description Single MIN_VOLUME Declaration public const float MIN_VOLUME = 0F Field Value Type Description Single Properties AllAudioLayers All attached audio sources, sorted with oldest source that played a SFX as first node. Declaration protected LinkedList<AudioSource> AllAudioLayers { get; } Property Value Type Description LinkedList < AudioSource > Remarks This is a write-able version of AllAudios . AllAudios All attached audio sources, sorted with oldest source that played a SFX as first node. Declaration public IReadOnlyCollection<AudioSource> AllAudios { get; } Property Value Type Description IReadOnlyCollection < AudioSource > AttachedSource Declaration protected AudioSource AttachedSource { get; } Property Value Type Description AudioSource ClipVariations A series of clips to play at random Declaration public RandomList<AudioClip> ClipVariations { get; } Property Value Type Description RandomList < AudioClip > IsMutatingPitch Whether this sound effect's pitch should be mutated Declaration public bool IsMutatingPitch { get; set; } Property Value Type Description Boolean IsMutatingVolume Whether this sound effect's volume should be mutated Declaration public bool IsMutatingVolume { get; set; } Property Value Type Description Boolean IsPausedOnTimeStop Gets or sets whether this sound effect should pause when is zero. Declaration public bool IsPausedOnTimeStop { get; set; } Property Value Type Description Boolean LatestAudio The attached audio source that played the latest SFX. Declaration public AudioSource LatestAudio { get; } Property Value Type Description AudioSource NumberOfLayers The number of one-shot sounds this component will allow to overlap. Declaration public int NumberOfLayers { get; set; } Property Value Type Description Int32 OriginalPitch The original audio source's pitch, before mutation was applied. Declaration public float OriginalPitch { get; } Property Value Type Description Single OriginalVolume The original audio source's volume, before mutation was applied. Declaration public float OriginalVolume { get; } Property Value Type Description Single PitchMutationRange The allowed range the pitch can mutate from the center pitch Declaration public Vector2 PitchMutationRange { get; set; } Property Value Type Description Vector2 VolumeMutationRange The allowed range the volume can mutate from the center pitch Declaration public Vector2 VolumeMutationRange { get; set; } Property Value Type Description Vector2 Methods Pause(SoundEffect.Layer) Pauses the audio, which can be resumed later. Declaration public void Pause(SoundEffect.Layer layerToPause = SoundEffect.Layer.All) Parameters Type Name Description SoundEffect.Layer layerToPause See Also Play() UnPause(SoundEffect.Layer) Play() Plays an audio on the latest layer, based on whether LatestAudio 's flag is set to true . Note: this method does not resume a previously paused sound effect. Declaration public void Play() Remarks If LatestAudio 's flag is set to true , then this method checks to see the audio's state. If stopped, a random clip will play on loop, with mutation applied to pitch and volume if flagged to do so. If paused, it resumes the paused clip, with pitch and volume unchanged. Otherwise, this method does nothing. If LatestAudio 's flag is not set to true , then this method acts like . While this method attempts to play a sound effect on an audio layer that isn't playing anything, if all of them are playing or paused, this method will stop the audio layer that played the oldest clip, and play a new random clip instead. See Also Stop(SoundEffect.Layer) Pause(SoundEffect.Layer) Resume(SoundEffect.Layer) Resumes the audio if it was paused earlier. Declaration public void Resume(SoundEffect.Layer layerToResume = SoundEffect.Layer.All) Parameters Type Name Description SoundEffect.Layer layerToResume Remarks This method is an alias to UnPause(SoundEffect.Layer) . See Also Pause(SoundEffect.Layer) Stop(SoundEffect.Layer) Stops the audio, and rewind to the beginning. Declaration public void Stop(SoundEffect.Layer layerToStop = SoundEffect.Layer.All) Parameters Type Name Description SoundEffect.Layer layerToStop Which layer(s) to stop. See Also Play() UnPause(SoundEffect.Layer) Resumes the audio if it was paused earlier. Declaration public void UnPause(SoundEffect.Layer layerToUnPause = SoundEffect.Layer.All) Parameters Type Name Description SoundEffect.Layer layerToUnPause See Also Pause(SoundEffect.Layer)"
  },
  "api/OmiyaGames.Audio.SoundEffect.Layer.html": {
    "href": "api/OmiyaGames.Audio.SoundEffect.Layer.html",
    "title": "Enum SoundEffect.Layer | Omiya Games - Audio documentation",
    "keywords": "Enum SoundEffect.Layer Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax public enum Layer Fields Name Description All Latest"
  },
  "api/OmiyaGames.Audio.TimeScaleAudioModifiers.html": {
    "href": "api/OmiyaGames.Audio.TimeScaleAudioModifiers.html",
    "title": "Class TimeScaleAudioModifiers | Omiya Games - Audio documentation",
    "keywords": "Class TimeScaleAudioModifiers Helper struct for params in AudioSettings . Inheritance Object TimeScaleAudioModifiers Namespace : OmiyaGames.Audio Assembly : cs.temp.dll.dll Syntax [Serializable] public class TimeScaleAudioModifiers Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-exp.1 Date: 3/7/2022 Author: Taro Omiya Initial draft. Properties DefaultSnapshot The snapshot to Mixer that reverts mixer to a no-effects, default state. Declaration public AudioMixerSnapshot DefaultSnapshot { get; } Property Value Type Description AudioMixerSnapshot Remarks This variable is set in the Unity Project Settings dialog. EnableFast Enable effects expressed in FastTimeSnapshot . Declaration public bool EnableFast { get; } Property Value Type Description Boolean Remarks This variable is set in the Unity Project Settings dialog. EnablePause Enable effects expressed in PausedSnapshot . Declaration public bool EnablePause { get; } Property Value Type Description Boolean Remarks This variable is set in the Unity Project Settings dialog. EnableSlow Enable effects expressed in SlowTimeSnapshot . Declaration public bool EnableSlow { get; } Property Value Type Description Boolean Remarks This variable is set in the Unity Project Settings dialog. FastPitchRange The pitch Mixer will be set to based on where falls in FastTimeRange . Declaration public Vector2 FastPitchRange { get; } Property Value Type Description Vector2 Remarks This variable is set in the Unity Project Settings dialog. FastTimeRange The range needs to be set to cause mixing of DefaultSnapshot and FastTimeSnapshot . The and represents minimum and maximum range, respectively. Declaration public Vector2 FastTimeRange { get; } Property Value Type Description Vector2 Remarks This variable is set in the Unity Project Settings dialog. FastTimeSnapshot The snapshot to Mixer that kicks in when time quickens. This snapshot is mixed with DefaultSnapshot depending on . Declaration public AudioMixerSnapshot FastTimeSnapshot { get; } Property Value Type Description AudioMixerSnapshot Remarks This variable is set in the Unity Project Settings dialog. Mixer The audio mixer that plays the effect. Declaration public AudioMixer Mixer { get; } Property Value Type Description AudioMixer Remarks This variable is set in the Unity Project Settings dialog. PausedSnapshot The snapshot to Mixer that kicks in when user pauses. Declaration public AudioMixerSnapshot PausedSnapshot { get; } Property Value Type Description AudioMixerSnapshot Remarks This variable is set in the Unity Project Settings dialog. PitchParam The parameter name to Mixer that changes the pitch. Declaration public string PitchParam { get; } Property Value Type Description String Remarks This variable is set in the Unity Project Settings dialog. SlowPitchRange The pitch Mixer will be set to based on where falls in SlowTimeRange . Declaration public Vector2 SlowPitchRange { get; } Property Value Type Description Vector2 Remarks This variable is set in the Unity Project Settings dialog. SlowTimeRange The range needs to be set to cause mixing of DefaultSnapshot and SlowTimeSnapshot . The and represents minimum and maximum range, respectively. Declaration public Vector2 SlowTimeRange { get; } Property Value Type Description Vector2 Remarks This variable is set in the Unity Project Settings dialog. SlowTimeSnapshot The snapshot to Mixer that kicks in when time slows. This snapshot is mixed with DefaultSnapshot depending on . Declaration public AudioMixerSnapshot SlowTimeSnapshot { get; } Property Value Type Description AudioMixerSnapshot Remarks This variable is set in the Unity Project Settings dialog."
  },
  "index.html": {
    "href": "index.html",
    "title": "Omiya Games - Audio | Omiya Games - Audio documentation",
    "keywords": "Omiya Games - Audio Audio is an auditory tools package by Omiya Games to provide a number of helper scripts and assets useful for game development. As of this writing, this package provides the following tools: Audio Manager The AudioManager is a script that interfaces with the project's Audio Mixer. Its settings are visible in the Project Settings window, like so: As a singleton class, audio manager allows the developer to adjust the volume and pitch for one of 5 potential audio groups in an Audio Mixer from nearly anywhere: Main - Adjusting the volume and pitch of this group will affect all audio. Music - Affects music playing both in the background, and within the game world (e.g. a radio.) Voices - Affects any spoken lines, grunts, and other human-like voices. Ambience - Affects any ambient sound effects, usually playing in the background. Sound Effects - Affects any other sound effects not covered by above groups. For more details, check out the dedicated manual page here . Sound Effect The SoundEffect script interfaces with an audio source to perform common tricks to create more varied sound effects. It is designed to add features to Unity's built-in AudioSource component: Also, sound effect can be directly added into the hierarchy via the Create... menu, both in the hierarchy window, and right-click context menu. This method has the added benefit of setting the audio source's output to the mixer group set in the Sound Effects settings under Audio Manager's Project Settings: For more details, check out the dedicated manual page here . Looping Music The SingleLoopingMusic asset allows defining a looping music with some extra goodies. It's created in the Project dialog through the usual \"Create\" context menu: The asset also allows adding an optional intro stinger that's played before the loop starts, and how long to delay the loop while the intro is playing (by default, set to how long the stinger is:) Note that SingleLoopingMusic is an instance of BackgroundAudio . To create other similar assets that can be played on AudioManager , consider extending BackgroundAudio and BackgroundAudio.Player . For more details, check out the dedicated manual page here . Install This (we swear, one-time!) setup is a bit of a doozy. First, install the package via OpenUPM's command line tool , which handles installing this package and its many, many dependencies: If you haven't already installed OpenUPM , you can do so through Node.js's npm (obviously have Node.js installed in your system first): npm install -g openupm-cli Then, to install this package, just run the following command at the root of your Unity project: openupm add com.omiyagames.audio Open Unity. One of this package's dependency is Unity's Addressables , which needs setup: Select Window -> Asset Managerment -> Addressables -> Groups from the file menu bar. A pop-up with a single button will appear. Click Create Addressables Settings . After some new assets are created in the project, close the pop-up window. Addressables are now setup. Another dependency that needs setup is Omiya Games' Saves package: Select Edit -> Project Settings... from the file menu bar. On the left sidebar, select Omiya Games -> Saves . Click on Create... , and save the new package settings file to any location within the project's Assets folder Saves are now setup. Select Window -> Package Manager... from the file menu bar to open the package manager dock. Import this package's Custom Settings sample. Move all the imported files to a folder more accessible location. You will likely be editing these files during development. Select Edit -> Project Settings... from the file menu bar to open project settings dock again. On the left sidebar, select Omiya Games -> Audio . Drag-and-drop the imported settings file, Audio Settings - Custom , into the Active Settings field. With the window content drastically changed, scroll to the bottom of the settings window, and click the Add Savers To Saves Settings button. (Optional) In this sample, there are a lot of assets under the Savers folder. These files contains the default volume and mute settings for each audio category. It's recommended to edit these files' default values to your liking. Select File -> Save Project to save all the above settings. Resources Documentation Change Log LICENSE Overall package is licensed under MIT , unless otherwise noted in the 3rd party licenses file and/or source code. Copyright (c) 2019-2022 Omiya Games"
  },
  "manual/audioManager.html": {
    "href": "manual/audioManager.html",
    "title": "Audio Manager | Omiya Games - Audio documentation",
    "keywords": "Audio Manager The AudioManager is a script that interfaces with the project's Audio Mixer. Its settings are visible in the Project Settings window, like so: As a singleton class, audio manager allows the developer to adjust the volume and pitch for one of 5 potential audio groups in an Audio Mixer from nearly anywhere: Main - Adjusting the volume and pitch of this group will affect all audio. Music - Affects music playing both in the background, and within the game world (e.g. a radio.) Voices - Affects any spoken lines, grunts, and other human-like voices. Ambience - Affects any ambient sound effects, usually playing in the background. Sound Effects - Affects any other sound effects not covered by above groups. An example code will look something like below: using System.Collections; using UnityEngine; using OmiyaGames.Audio; public class VolumeExample : MonoBehaviour { // This tool adds a Sound Effect script [SerializeField] SoundEffect testSound; IEnumerator Start() { // IMPORTANT! Setting up audio manager is required for adjusting volume and pitch control. // This only needs to be called once throughout the entire game. // It is also safe, though not recommended, to call this function multiple times. yield return AudioManager.Setup(); // Adjust the volume like so, between 0f and 1f. // Note that this value *does* get saved in PlayerPrefs. // This means the next time user loads the game, and this script calls AudioManager.Setup(), // the VolumePercent will be updated to the value it was set to last time the game was open. AudioManager.Main.VolumePercent = 0.5f; // Playing sound is fairly simple testSound.Play(); yield return new WaitForSeconds(2f); // Adjusting for a different audio grou. // These values are also saved in PlayerPrefs. AudioManager.SoundEffects.VolumePercent = 0.5f; testSound.Play(); } } Time-Related Audio Distortions Audio manager also supports pitch-shifting and distortion effects in response to changes made to TimeManager . These effects utilizes the mixer's snapshots: A script utilizing these effects will look something like: using System.Collections; using UnityEngine; using OmiyaGames.Audio; using OmiyaGames.Managers; public class TimeEffectsExample : MonoBehaviour { [SerializeField] SoundEffect testSound; IEnumerator Start() { // IMPORTANT! Setting up audio manager is also required for time-related audio effects. yield return AudioManager.Setup(); // Pause the game to trigger the pause snapshots. TimeManager.IsManuallyPaused = true; testSound.Play(); yield return new WaitForSecondsRealtime(2f); TimeManager.IsManuallyPaused = false; // Changing timescale also changes the audio TimeManager.TimeScale = 0.5f; testSound.Play(); yield return new WaitForSecondsRealtime(2f); TimeManager.TimeScale = 1.5f; testSound.Play(); } }"
  },
  "manual/changelog.html": {
    "href": "manual/changelog.html",
    "title": "Change Log: | Omiya Games - Audio documentation",
    "keywords": "Change Log: 1.1.0 Enhancing BackgroundAudio - Adding property BackgroundAudio.Player.IsPausedOnTimeStop so player can auto-pause when Time.timeScale is zero. Ironically, this was already the default behavior; this property adds the option to disable it. 1.0.0 Added SingleLoopingMusic - ScriptableObject that generates a MonoBehaviour script (called BackgroundAudio.Player ), playing an optional intro stinger first, before playing the looping main music. Added abstract BackgroundAudio so one can create more ScriptableObject like SingleLoopingMusic . Enhancing AudioLayer.Background - Adding new method, PlayNextCoroutine() to play a new BackgroundAudio . Adding property History that tracks what music has been played. Adding helper methods, PlayPreviousCoroutine , FadeOutCurrnetPlaying , and FadeInCurrentPlayingCoroutine to play music from History . 0.1.0-exp.1 Initial release: Added AudioManager - singleton script that handles adjusting volumes and pitch per audio layer, apply audio effects when TimeManager changes, etc. Added SoundEffect - MonoBehaviour script that handles common audio polishes, such as mutating pitch and volume, before playing a sound effect on the attached AudioSource ."
  },
  "manual/loopingMusic.html": {
    "href": "manual/loopingMusic.html",
    "title": "Looping Music | Omiya Games - Audio documentation",
    "keywords": "Looping Music The SingleLoopingMusic asset allows defining a looping music with some extra goodies. It's created in the Project dialog through the usual \"Create\" context menu: The asset also allows adding an optional intro stinger that's played before the loop starts, and how long to delay the loop while the intro is playing (by default, set to how long the stinger is:) For starters, helper scripts ChangeAudioOnStart.cs and ChangeAudioOnTrigger.cs has been added to this package. The former allows one to change the background music and/or ambience when the scene first loads in; the latter does the same thing when an object with a specific tag (usually the \"Player\") enters a trigger collider. Both scripts support loading Addressables as well as project files directly. For a more custom behavior, one can play the asset on the Music or Ambience layer in the AudioManager : using System.Collections; using UnityEngine; using OmiyaGames.Audio; public class MusicExample : MonoBehaviour { [SerializeField] SingleLoopingMusic testMusic; IEnumerator Start() { // Setting up audio manager so the music will play at the right volume yield return AudioManager.Setup(); // Play the music on music mixer layer yield return StartCoroutine AudioManager.Music.PlayNextCoroutine(testMusic, // The optional FadeInArgs can be added to fade this music in, and the prior music out. new FadeInArgs() { // Setting the fade duration for half-a-second DurationSeconds = 0.5f } ); } } Note that SingleLoopingMusic is an instance of BackgroundAudio . To create other similar assets that can be played on AudioManager , consider extending BackgroundAudio and BackgroundAudio.Player ."
  },
  "manual/soundEffect.html": {
    "href": "manual/soundEffect.html",
    "title": "Sound Effect | Omiya Games - Audio documentation",
    "keywords": "Sound Effect The SoundEffect script interfaces with an audio source to perform common tricks to create more varied sound effects. It is designed to add features to Unity's built-in AudioSource component: Note that an audio clip doesn't have to be added into the audio source for SoundEffect to work: the script will automatically choose a random clip from the clip variations list and set the audio source's clip. That said, if a clip has been added to the attached audio source, that will be added to the clip variations list on script awake, with a default Frequency of one. Lastly, most adjustments made to the attached audio source -- besides volume and pitch, if Mutate Volume and Mutate Pitch fields are checked, respectively -- will affect the sound played by SoundEffect , including all the overlapping sound effects generated by this script. Using the sound effect script in code is pretty simple: using System.Collections; using UnityEngine; using OmiyaGames.Audio; public class TimeEffectsExample : MonoBehaviour { [SerializeField] SoundEffect testSound; IEnumerator Start() { // Setting up audio manager so the sound effect will play at the right volume yield return AudioManager.Setup(); // Play a random clip in the clip variations list testSound.Play(); } } Also, sound effect can be directly added into the hierarchy via the Create... menu, both in the hierarchy window, and right-click context menu. This method has the added benefit of setting the audio source's output to the mixer group set in the Sound Effects settings under Audio Manager's Project Settings:"
  }
}